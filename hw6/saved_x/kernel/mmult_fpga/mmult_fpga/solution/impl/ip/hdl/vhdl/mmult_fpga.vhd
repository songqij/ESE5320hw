-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_fpga is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_B0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B0_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_B0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_B1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_B2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_B2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B2_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_B2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_B0_USER_VALUE : INTEGER := 0;
    C_M_AXI_B0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B1_USER_VALUE : INTEGER := 0;
    C_M_AXI_B1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_B2_USER_VALUE : INTEGER := 0;
    C_M_AXI_B2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_B2_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    m_axi_b0_AWVALID : OUT STD_LOGIC;
    m_axi_b0_AWREADY : IN STD_LOGIC;
    m_axi_b0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_ADDR_WIDTH-1 downto 0);
    m_axi_b0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_ID_WIDTH-1 downto 0);
    m_axi_b0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_AWUSER_WIDTH-1 downto 0);
    m_axi_b0_WVALID : OUT STD_LOGIC;
    m_axi_b0_WREADY : IN STD_LOGIC;
    m_axi_b0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_DATA_WIDTH-1 downto 0);
    m_axi_b0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_DATA_WIDTH/8-1 downto 0);
    m_axi_b0_WLAST : OUT STD_LOGIC;
    m_axi_b0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_ID_WIDTH-1 downto 0);
    m_axi_b0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_WUSER_WIDTH-1 downto 0);
    m_axi_b0_ARVALID : OUT STD_LOGIC;
    m_axi_b0_ARREADY : IN STD_LOGIC;
    m_axi_b0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_ADDR_WIDTH-1 downto 0);
    m_axi_b0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_ID_WIDTH-1 downto 0);
    m_axi_b0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B0_ARUSER_WIDTH-1 downto 0);
    m_axi_b0_RVALID : IN STD_LOGIC;
    m_axi_b0_RREADY : OUT STD_LOGIC;
    m_axi_b0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B0_DATA_WIDTH-1 downto 0);
    m_axi_b0_RLAST : IN STD_LOGIC;
    m_axi_b0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B0_ID_WIDTH-1 downto 0);
    m_axi_b0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B0_RUSER_WIDTH-1 downto 0);
    m_axi_b0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_BVALID : IN STD_LOGIC;
    m_axi_b0_BREADY : OUT STD_LOGIC;
    m_axi_b0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B0_ID_WIDTH-1 downto 0);
    m_axi_b0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B0_BUSER_WIDTH-1 downto 0);
    m_axi_b1_AWVALID : OUT STD_LOGIC;
    m_axi_b1_AWREADY : IN STD_LOGIC;
    m_axi_b1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ADDR_WIDTH-1 downto 0);
    m_axi_b1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_b1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_AWUSER_WIDTH-1 downto 0);
    m_axi_b1_WVALID : OUT STD_LOGIC;
    m_axi_b1_WREADY : IN STD_LOGIC;
    m_axi_b1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_DATA_WIDTH-1 downto 0);
    m_axi_b1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_DATA_WIDTH/8-1 downto 0);
    m_axi_b1_WLAST : OUT STD_LOGIC;
    m_axi_b1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_b1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_WUSER_WIDTH-1 downto 0);
    m_axi_b1_ARVALID : OUT STD_LOGIC;
    m_axi_b1_ARREADY : IN STD_LOGIC;
    m_axi_b1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ADDR_WIDTH-1 downto 0);
    m_axi_b1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_b1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B1_ARUSER_WIDTH-1 downto 0);
    m_axi_b1_RVALID : IN STD_LOGIC;
    m_axi_b1_RREADY : OUT STD_LOGIC;
    m_axi_b1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B1_DATA_WIDTH-1 downto 0);
    m_axi_b1_RLAST : IN STD_LOGIC;
    m_axi_b1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_b1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B1_RUSER_WIDTH-1 downto 0);
    m_axi_b1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_BVALID : IN STD_LOGIC;
    m_axi_b1_BREADY : OUT STD_LOGIC;
    m_axi_b1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B1_ID_WIDTH-1 downto 0);
    m_axi_b1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B1_BUSER_WIDTH-1 downto 0);
    m_axi_b2_AWVALID : OUT STD_LOGIC;
    m_axi_b2_AWREADY : IN STD_LOGIC;
    m_axi_b2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_ADDR_WIDTH-1 downto 0);
    m_axi_b2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_ID_WIDTH-1 downto 0);
    m_axi_b2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_AWUSER_WIDTH-1 downto 0);
    m_axi_b2_WVALID : OUT STD_LOGIC;
    m_axi_b2_WREADY : IN STD_LOGIC;
    m_axi_b2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_DATA_WIDTH-1 downto 0);
    m_axi_b2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_DATA_WIDTH/8-1 downto 0);
    m_axi_b2_WLAST : OUT STD_LOGIC;
    m_axi_b2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_ID_WIDTH-1 downto 0);
    m_axi_b2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_WUSER_WIDTH-1 downto 0);
    m_axi_b2_ARVALID : OUT STD_LOGIC;
    m_axi_b2_ARREADY : IN STD_LOGIC;
    m_axi_b2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_ADDR_WIDTH-1 downto 0);
    m_axi_b2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_ID_WIDTH-1 downto 0);
    m_axi_b2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_b2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_B2_ARUSER_WIDTH-1 downto 0);
    m_axi_b2_RVALID : IN STD_LOGIC;
    m_axi_b2_RREADY : OUT STD_LOGIC;
    m_axi_b2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_B2_DATA_WIDTH-1 downto 0);
    m_axi_b2_RLAST : IN STD_LOGIC;
    m_axi_b2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_B2_ID_WIDTH-1 downto 0);
    m_axi_b2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B2_RUSER_WIDTH-1 downto 0);
    m_axi_b2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b2_BVALID : IN STD_LOGIC;
    m_axi_b2_BREADY : OUT STD_LOGIC;
    m_axi_b2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_B2_ID_WIDTH-1 downto 0);
    m_axi_b2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_B2_BUSER_WIDTH-1 downto 0);
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of mmult_fpga is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mmult_fpga_mmult_fpga,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=300891,HLS_SYN_TPT=300822,HLS_SYN_MEM=154,HLS_SYN_DSP=0,HLS_SYN_FF=26380,HLS_SYN_LUT=20762,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal C : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal b0_AWREADY : STD_LOGIC;
    signal b0_WREADY : STD_LOGIC;
    signal b0_ARREADY : STD_LOGIC;
    signal b0_RVALID : STD_LOGIC;
    signal b0_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal b0_RLAST : STD_LOGIC;
    signal b0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal b0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b0_BVALID : STD_LOGIC;
    signal b0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal b0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b1_AWREADY : STD_LOGIC;
    signal b1_WREADY : STD_LOGIC;
    signal b1_ARREADY : STD_LOGIC;
    signal b1_RVALID : STD_LOGIC;
    signal b1_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal b1_RLAST : STD_LOGIC;
    signal b1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal b1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b1_BVALID : STD_LOGIC;
    signal b1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal b1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b2_AWREADY : STD_LOGIC;
    signal b2_WREADY : STD_LOGIC;
    signal b2_ARREADY : STD_LOGIC;
    signal b2_RVALID : STD_LOGIC;
    signal b2_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal b2_RLAST : STD_LOGIC;
    signal b2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal b2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal b2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b2_BVALID : STD_LOGIC;
    signal b2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal b2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal b2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_ap_start : STD_LOGIC;
    signal read3_U0_start_full_n : STD_LOGIC;
    signal read3_U0_ap_done : STD_LOGIC;
    signal read3_U0_ap_continue : STD_LOGIC;
    signal read3_U0_ap_idle : STD_LOGIC;
    signal read3_U0_ap_ready : STD_LOGIC;
    signal read3_U0_start_out : STD_LOGIC;
    signal read3_U0_start_write : STD_LOGIC;
    signal read3_U0_m_axi_b0_AWVALID : STD_LOGIC;
    signal read3_U0_m_axi_b0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_m_axi_b0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read3_U0_m_axi_b0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b0_WVALID : STD_LOGIC;
    signal read3_U0_m_axi_b0_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read3_U0_m_axi_b0_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_m_axi_b0_WLAST : STD_LOGIC;
    signal read3_U0_m_axi_b0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b0_ARVALID : STD_LOGIC;
    signal read3_U0_m_axi_b0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_m_axi_b0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read3_U0_m_axi_b0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b0_RREADY : STD_LOGIC;
    signal read3_U0_m_axi_b0_BREADY : STD_LOGIC;
    signal read3_U0_m_axi_b1_AWVALID : STD_LOGIC;
    signal read3_U0_m_axi_b1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_m_axi_b1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read3_U0_m_axi_b1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b1_WVALID : STD_LOGIC;
    signal read3_U0_m_axi_b1_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal read3_U0_m_axi_b1_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_m_axi_b1_WLAST : STD_LOGIC;
    signal read3_U0_m_axi_b1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b1_ARVALID : STD_LOGIC;
    signal read3_U0_m_axi_b1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_m_axi_b1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read3_U0_m_axi_b1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read3_U0_m_axi_b1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read3_U0_m_axi_b1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read3_U0_m_axi_b1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read3_U0_m_axi_b1_RREADY : STD_LOGIC;
    signal read3_U0_m_axi_b1_BREADY : STD_LOGIC;
    signal read3_U0_A_tmp3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read3_U0_A_tmp3_write : STD_LOGIC;
    signal read3_U0_B_tmp4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read3_U0_B_tmp4_write : STD_LOGIC;
    signal read3_U0_C_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal read3_U0_C_out_write : STD_LOGIC;
    signal read3_U0_ap_ext_blocking_n : STD_LOGIC;
    signal read3_U0_ap_str_blocking_n : STD_LOGIC;
    signal read3_U0_ap_int_blocking_n : STD_LOGIC;
    signal execution_U0_ap_start : STD_LOGIC;
    signal execution_U0_ap_done : STD_LOGIC;
    signal execution_U0_ap_continue : STD_LOGIC;
    signal execution_U0_ap_idle : STD_LOGIC;
    signal execution_U0_ap_ready : STD_LOGIC;
    signal execution_U0_A_tmp_read : STD_LOGIC;
    signal execution_U0_B_tmp_read : STD_LOGIC;
    signal execution_U0_result_din : STD_LOGIC_VECTOR (31 downto 0);
    signal execution_U0_result_write : STD_LOGIC;
    signal execution_U0_ap_ext_blocking_n : STD_LOGIC;
    signal execution_U0_ap_str_blocking_n : STD_LOGIC;
    signal execution_U0_ap_int_blocking_n : STD_LOGIC;
    signal write_U0_ap_start : STD_LOGIC;
    signal write_U0_ap_done : STD_LOGIC;
    signal write_U0_ap_continue : STD_LOGIC;
    signal write_U0_ap_idle : STD_LOGIC;
    signal write_U0_ap_ready : STD_LOGIC;
    signal write_U0_result5_read : STD_LOGIC;
    signal write_U0_m_axi_b2_AWVALID : STD_LOGIC;
    signal write_U0_m_axi_b2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_b2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_b2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_U0_m_axi_b2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_b2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_b2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_b2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_b2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_b2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_b2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_b2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_b2_WVALID : STD_LOGIC;
    signal write_U0_m_axi_b2_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal write_U0_m_axi_b2_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_b2_WLAST : STD_LOGIC;
    signal write_U0_m_axi_b2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_b2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_b2_ARVALID : STD_LOGIC;
    signal write_U0_m_axi_b2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_U0_m_axi_b2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_b2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_U0_m_axi_b2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_b2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_b2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_U0_m_axi_b2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_b2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_U0_m_axi_b2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_b2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_U0_m_axi_b2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_U0_m_axi_b2_RREADY : STD_LOGIC;
    signal write_U0_m_axi_b2_BREADY : STD_LOGIC;
    signal write_U0_output_r_read : STD_LOGIC;
    signal write_U0_ap_ext_blocking_n : STD_LOGIC;
    signal write_U0_ap_str_blocking_n : STD_LOGIC;
    signal write_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal A_tmp_full_n : STD_LOGIC;
    signal A_tmp_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal A_tmp_empty_n : STD_LOGIC;
    signal B_tmp_full_n : STD_LOGIC;
    signal B_tmp_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal B_tmp_empty_n : STD_LOGIC;
    signal C_c_full_n : STD_LOGIC;
    signal C_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal C_c_empty_n : STD_LOGIC;
    signal result_full_n : STD_LOGIC;
    signal result_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal result_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_execution_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_execution_U0_full_n : STD_LOGIC;
    signal start_for_execution_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_execution_U0_empty_n : STD_LOGIC;
    signal start_for_write_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_U0_full_n : STD_LOGIC;
    signal start_for_write_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_U0_empty_n : STD_LOGIC;
    signal execution_U0_start_full_n : STD_LOGIC;
    signal execution_U0_start_write : STD_LOGIC;
    signal write_U0_start_full_n : STD_LOGIC;
    signal write_U0_start_write : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mmult_fpga_read3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_b0_AWVALID : OUT STD_LOGIC;
        m_axi_b0_AWREADY : IN STD_LOGIC;
        m_axi_b0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_WVALID : OUT STD_LOGIC;
        m_axi_b0_WREADY : IN STD_LOGIC;
        m_axi_b0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_b0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b0_WLAST : OUT STD_LOGIC;
        m_axi_b0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_ARVALID : OUT STD_LOGIC;
        m_axi_b0_ARREADY : IN STD_LOGIC;
        m_axi_b0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_RVALID : IN STD_LOGIC;
        m_axi_b0_RREADY : OUT STD_LOGIC;
        m_axi_b0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_b0_RLAST : IN STD_LOGIC;
        m_axi_b0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b0_BVALID : IN STD_LOGIC;
        m_axi_b0_BREADY : OUT STD_LOGIC;
        m_axi_b0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_AWVALID : OUT STD_LOGIC;
        m_axi_b1_AWREADY : IN STD_LOGIC;
        m_axi_b1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_WVALID : OUT STD_LOGIC;
        m_axi_b1_WREADY : IN STD_LOGIC;
        m_axi_b1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_b1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b1_WLAST : OUT STD_LOGIC;
        m_axi_b1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_ARVALID : OUT STD_LOGIC;
        m_axi_b1_ARREADY : IN STD_LOGIC;
        m_axi_b1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_RVALID : IN STD_LOGIC;
        m_axi_b1_RREADY : OUT STD_LOGIC;
        m_axi_b1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_b1_RLAST : IN STD_LOGIC;
        m_axi_b1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b1_BVALID : IN STD_LOGIC;
        m_axi_b1_BREADY : OUT STD_LOGIC;
        m_axi_b1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A_tmp3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_tmp3_full_n : IN STD_LOGIC;
        A_tmp3_write : OUT STD_LOGIC;
        B_tmp4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_tmp4_full_n : IN STD_LOGIC;
        B_tmp4_write : OUT STD_LOGIC;
        A : IN STD_LOGIC_VECTOR (63 downto 0);
        B : IN STD_LOGIC_VECTOR (63 downto 0);
        C : IN STD_LOGIC_VECTOR (63 downto 0);
        C_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        C_out_full_n : IN STD_LOGIC;
        C_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component mmult_fpga_execution IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_tmp_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        A_tmp_empty_n : IN STD_LOGIC;
        A_tmp_read : OUT STD_LOGIC;
        B_tmp_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        B_tmp_empty_n : IN STD_LOGIC;
        B_tmp_read : OUT STD_LOGIC;
        result_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_full_n : IN STD_LOGIC;
        result_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component mmult_fpga_write_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        result5_empty_n : IN STD_LOGIC;
        result5_read : OUT STD_LOGIC;
        m_axi_b2_AWVALID : OUT STD_LOGIC;
        m_axi_b2_AWREADY : IN STD_LOGIC;
        m_axi_b2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_WVALID : OUT STD_LOGIC;
        m_axi_b2_WREADY : IN STD_LOGIC;
        m_axi_b2_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_b2_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b2_WLAST : OUT STD_LOGIC;
        m_axi_b2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_ARVALID : OUT STD_LOGIC;
        m_axi_b2_ARREADY : IN STD_LOGIC;
        m_axi_b2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_b2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_b2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_b2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_b2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_RVALID : IN STD_LOGIC;
        m_axi_b2_RREADY : OUT STD_LOGIC;
        m_axi_b2_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_b2_RLAST : IN STD_LOGIC;
        m_axi_b2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b2_BVALID : IN STD_LOGIC;
        m_axi_b2_BREADY : OUT STD_LOGIC;
        m_axi_b2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_b2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_b2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component mmult_fpga_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mmult_fpga_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mmult_fpga_start_for_execution_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mmult_fpga_start_for_write_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component mmult_fpga_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        C : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component mmult_fpga_b0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mmult_fpga_b1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mmult_fpga_b2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component mmult_fpga_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        C => C,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    b0_m_axi_U : component mmult_fpga_b0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_b0_AWVALID,
        AWREADY => m_axi_b0_AWREADY,
        AWADDR => m_axi_b0_AWADDR,
        AWID => m_axi_b0_AWID,
        AWLEN => m_axi_b0_AWLEN,
        AWSIZE => m_axi_b0_AWSIZE,
        AWBURST => m_axi_b0_AWBURST,
        AWLOCK => m_axi_b0_AWLOCK,
        AWCACHE => m_axi_b0_AWCACHE,
        AWPROT => m_axi_b0_AWPROT,
        AWQOS => m_axi_b0_AWQOS,
        AWREGION => m_axi_b0_AWREGION,
        AWUSER => m_axi_b0_AWUSER,
        WVALID => m_axi_b0_WVALID,
        WREADY => m_axi_b0_WREADY,
        WDATA => m_axi_b0_WDATA,
        WSTRB => m_axi_b0_WSTRB,
        WLAST => m_axi_b0_WLAST,
        WID => m_axi_b0_WID,
        WUSER => m_axi_b0_WUSER,
        ARVALID => m_axi_b0_ARVALID,
        ARREADY => m_axi_b0_ARREADY,
        ARADDR => m_axi_b0_ARADDR,
        ARID => m_axi_b0_ARID,
        ARLEN => m_axi_b0_ARLEN,
        ARSIZE => m_axi_b0_ARSIZE,
        ARBURST => m_axi_b0_ARBURST,
        ARLOCK => m_axi_b0_ARLOCK,
        ARCACHE => m_axi_b0_ARCACHE,
        ARPROT => m_axi_b0_ARPROT,
        ARQOS => m_axi_b0_ARQOS,
        ARREGION => m_axi_b0_ARREGION,
        ARUSER => m_axi_b0_ARUSER,
        RVALID => m_axi_b0_RVALID,
        RREADY => m_axi_b0_RREADY,
        RDATA => m_axi_b0_RDATA,
        RLAST => m_axi_b0_RLAST,
        RID => m_axi_b0_RID,
        RUSER => m_axi_b0_RUSER,
        RRESP => m_axi_b0_RRESP,
        BVALID => m_axi_b0_BVALID,
        BREADY => m_axi_b0_BREADY,
        BRESP => m_axi_b0_BRESP,
        BID => m_axi_b0_BID,
        BUSER => m_axi_b0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read3_U0_m_axi_b0_ARVALID,
        I_ARREADY => b0_ARREADY,
        I_ARADDR => read3_U0_m_axi_b0_ARADDR,
        I_ARID => read3_U0_m_axi_b0_ARID,
        I_ARLEN => read3_U0_m_axi_b0_ARLEN,
        I_ARSIZE => read3_U0_m_axi_b0_ARSIZE,
        I_ARLOCK => read3_U0_m_axi_b0_ARLOCK,
        I_ARCACHE => read3_U0_m_axi_b0_ARCACHE,
        I_ARQOS => read3_U0_m_axi_b0_ARQOS,
        I_ARPROT => read3_U0_m_axi_b0_ARPROT,
        I_ARUSER => read3_U0_m_axi_b0_ARUSER,
        I_ARBURST => read3_U0_m_axi_b0_ARBURST,
        I_ARREGION => read3_U0_m_axi_b0_ARREGION,
        I_RVALID => b0_RVALID,
        I_RREADY => read3_U0_m_axi_b0_RREADY,
        I_RDATA => b0_RDATA,
        I_RID => b0_RID,
        I_RUSER => b0_RUSER,
        I_RRESP => b0_RRESP,
        I_RLAST => b0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => b0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => b0_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => b0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => b0_BRESP,
        I_BID => b0_BID,
        I_BUSER => b0_BUSER);

    b1_m_axi_U : component mmult_fpga_b1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_b1_AWVALID,
        AWREADY => m_axi_b1_AWREADY,
        AWADDR => m_axi_b1_AWADDR,
        AWID => m_axi_b1_AWID,
        AWLEN => m_axi_b1_AWLEN,
        AWSIZE => m_axi_b1_AWSIZE,
        AWBURST => m_axi_b1_AWBURST,
        AWLOCK => m_axi_b1_AWLOCK,
        AWCACHE => m_axi_b1_AWCACHE,
        AWPROT => m_axi_b1_AWPROT,
        AWQOS => m_axi_b1_AWQOS,
        AWREGION => m_axi_b1_AWREGION,
        AWUSER => m_axi_b1_AWUSER,
        WVALID => m_axi_b1_WVALID,
        WREADY => m_axi_b1_WREADY,
        WDATA => m_axi_b1_WDATA,
        WSTRB => m_axi_b1_WSTRB,
        WLAST => m_axi_b1_WLAST,
        WID => m_axi_b1_WID,
        WUSER => m_axi_b1_WUSER,
        ARVALID => m_axi_b1_ARVALID,
        ARREADY => m_axi_b1_ARREADY,
        ARADDR => m_axi_b1_ARADDR,
        ARID => m_axi_b1_ARID,
        ARLEN => m_axi_b1_ARLEN,
        ARSIZE => m_axi_b1_ARSIZE,
        ARBURST => m_axi_b1_ARBURST,
        ARLOCK => m_axi_b1_ARLOCK,
        ARCACHE => m_axi_b1_ARCACHE,
        ARPROT => m_axi_b1_ARPROT,
        ARQOS => m_axi_b1_ARQOS,
        ARREGION => m_axi_b1_ARREGION,
        ARUSER => m_axi_b1_ARUSER,
        RVALID => m_axi_b1_RVALID,
        RREADY => m_axi_b1_RREADY,
        RDATA => m_axi_b1_RDATA,
        RLAST => m_axi_b1_RLAST,
        RID => m_axi_b1_RID,
        RUSER => m_axi_b1_RUSER,
        RRESP => m_axi_b1_RRESP,
        BVALID => m_axi_b1_BVALID,
        BREADY => m_axi_b1_BREADY,
        BRESP => m_axi_b1_BRESP,
        BID => m_axi_b1_BID,
        BUSER => m_axi_b1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read3_U0_m_axi_b1_ARVALID,
        I_ARREADY => b1_ARREADY,
        I_ARADDR => read3_U0_m_axi_b1_ARADDR,
        I_ARID => read3_U0_m_axi_b1_ARID,
        I_ARLEN => read3_U0_m_axi_b1_ARLEN,
        I_ARSIZE => read3_U0_m_axi_b1_ARSIZE,
        I_ARLOCK => read3_U0_m_axi_b1_ARLOCK,
        I_ARCACHE => read3_U0_m_axi_b1_ARCACHE,
        I_ARQOS => read3_U0_m_axi_b1_ARQOS,
        I_ARPROT => read3_U0_m_axi_b1_ARPROT,
        I_ARUSER => read3_U0_m_axi_b1_ARUSER,
        I_ARBURST => read3_U0_m_axi_b1_ARBURST,
        I_ARREGION => read3_U0_m_axi_b1_ARREGION,
        I_RVALID => b1_RVALID,
        I_RREADY => read3_U0_m_axi_b1_RREADY,
        I_RDATA => b1_RDATA,
        I_RID => b1_RID,
        I_RUSER => b1_RUSER,
        I_RRESP => b1_RRESP,
        I_RLAST => b1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => b1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => b1_WREADY,
        I_WDATA => ap_const_lv512_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv64_0,
        I_BVALID => b1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => b1_BRESP,
        I_BID => b1_BID,
        I_BUSER => b1_BUSER);

    b2_m_axi_U : component mmult_fpga_b2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 512,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_B2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_B2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_B2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_B2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_B2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_B2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_B2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_B2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_B2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_B2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_B2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_b2_AWVALID,
        AWREADY => m_axi_b2_AWREADY,
        AWADDR => m_axi_b2_AWADDR,
        AWID => m_axi_b2_AWID,
        AWLEN => m_axi_b2_AWLEN,
        AWSIZE => m_axi_b2_AWSIZE,
        AWBURST => m_axi_b2_AWBURST,
        AWLOCK => m_axi_b2_AWLOCK,
        AWCACHE => m_axi_b2_AWCACHE,
        AWPROT => m_axi_b2_AWPROT,
        AWQOS => m_axi_b2_AWQOS,
        AWREGION => m_axi_b2_AWREGION,
        AWUSER => m_axi_b2_AWUSER,
        WVALID => m_axi_b2_WVALID,
        WREADY => m_axi_b2_WREADY,
        WDATA => m_axi_b2_WDATA,
        WSTRB => m_axi_b2_WSTRB,
        WLAST => m_axi_b2_WLAST,
        WID => m_axi_b2_WID,
        WUSER => m_axi_b2_WUSER,
        ARVALID => m_axi_b2_ARVALID,
        ARREADY => m_axi_b2_ARREADY,
        ARADDR => m_axi_b2_ARADDR,
        ARID => m_axi_b2_ARID,
        ARLEN => m_axi_b2_ARLEN,
        ARSIZE => m_axi_b2_ARSIZE,
        ARBURST => m_axi_b2_ARBURST,
        ARLOCK => m_axi_b2_ARLOCK,
        ARCACHE => m_axi_b2_ARCACHE,
        ARPROT => m_axi_b2_ARPROT,
        ARQOS => m_axi_b2_ARQOS,
        ARREGION => m_axi_b2_ARREGION,
        ARUSER => m_axi_b2_ARUSER,
        RVALID => m_axi_b2_RVALID,
        RREADY => m_axi_b2_RREADY,
        RDATA => m_axi_b2_RDATA,
        RLAST => m_axi_b2_RLAST,
        RID => m_axi_b2_RID,
        RUSER => m_axi_b2_RUSER,
        RRESP => m_axi_b2_RRESP,
        BVALID => m_axi_b2_BVALID,
        BREADY => m_axi_b2_BREADY,
        BRESP => m_axi_b2_BRESP,
        BID => m_axi_b2_BID,
        BUSER => m_axi_b2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => b2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => b2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => b2_RDATA,
        I_RID => b2_RID,
        I_RUSER => b2_RUSER,
        I_RRESP => b2_RRESP,
        I_RLAST => b2_RLAST,
        I_AWVALID => write_U0_m_axi_b2_AWVALID,
        I_AWREADY => b2_AWREADY,
        I_AWADDR => write_U0_m_axi_b2_AWADDR,
        I_AWID => write_U0_m_axi_b2_AWID,
        I_AWLEN => write_U0_m_axi_b2_AWLEN,
        I_AWSIZE => write_U0_m_axi_b2_AWSIZE,
        I_AWLOCK => write_U0_m_axi_b2_AWLOCK,
        I_AWCACHE => write_U0_m_axi_b2_AWCACHE,
        I_AWQOS => write_U0_m_axi_b2_AWQOS,
        I_AWPROT => write_U0_m_axi_b2_AWPROT,
        I_AWUSER => write_U0_m_axi_b2_AWUSER,
        I_AWBURST => write_U0_m_axi_b2_AWBURST,
        I_AWREGION => write_U0_m_axi_b2_AWREGION,
        I_WVALID => write_U0_m_axi_b2_WVALID,
        I_WREADY => b2_WREADY,
        I_WDATA => write_U0_m_axi_b2_WDATA,
        I_WID => write_U0_m_axi_b2_WID,
        I_WUSER => write_U0_m_axi_b2_WUSER,
        I_WLAST => write_U0_m_axi_b2_WLAST,
        I_WSTRB => write_U0_m_axi_b2_WSTRB,
        I_BVALID => b2_BVALID,
        I_BREADY => write_U0_m_axi_b2_BREADY,
        I_BRESP => b2_BRESP,
        I_BID => b2_BID,
        I_BUSER => b2_BUSER);

    read3_U0 : component mmult_fpga_read3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read3_U0_ap_start,
        start_full_n => read3_U0_start_full_n,
        ap_done => read3_U0_ap_done,
        ap_continue => read3_U0_ap_continue,
        ap_idle => read3_U0_ap_idle,
        ap_ready => read3_U0_ap_ready,
        start_out => read3_U0_start_out,
        start_write => read3_U0_start_write,
        m_axi_b0_AWVALID => read3_U0_m_axi_b0_AWVALID,
        m_axi_b0_AWREADY => ap_const_logic_0,
        m_axi_b0_AWADDR => read3_U0_m_axi_b0_AWADDR,
        m_axi_b0_AWID => read3_U0_m_axi_b0_AWID,
        m_axi_b0_AWLEN => read3_U0_m_axi_b0_AWLEN,
        m_axi_b0_AWSIZE => read3_U0_m_axi_b0_AWSIZE,
        m_axi_b0_AWBURST => read3_U0_m_axi_b0_AWBURST,
        m_axi_b0_AWLOCK => read3_U0_m_axi_b0_AWLOCK,
        m_axi_b0_AWCACHE => read3_U0_m_axi_b0_AWCACHE,
        m_axi_b0_AWPROT => read3_U0_m_axi_b0_AWPROT,
        m_axi_b0_AWQOS => read3_U0_m_axi_b0_AWQOS,
        m_axi_b0_AWREGION => read3_U0_m_axi_b0_AWREGION,
        m_axi_b0_AWUSER => read3_U0_m_axi_b0_AWUSER,
        m_axi_b0_WVALID => read3_U0_m_axi_b0_WVALID,
        m_axi_b0_WREADY => ap_const_logic_0,
        m_axi_b0_WDATA => read3_U0_m_axi_b0_WDATA,
        m_axi_b0_WSTRB => read3_U0_m_axi_b0_WSTRB,
        m_axi_b0_WLAST => read3_U0_m_axi_b0_WLAST,
        m_axi_b0_WID => read3_U0_m_axi_b0_WID,
        m_axi_b0_WUSER => read3_U0_m_axi_b0_WUSER,
        m_axi_b0_ARVALID => read3_U0_m_axi_b0_ARVALID,
        m_axi_b0_ARREADY => b0_ARREADY,
        m_axi_b0_ARADDR => read3_U0_m_axi_b0_ARADDR,
        m_axi_b0_ARID => read3_U0_m_axi_b0_ARID,
        m_axi_b0_ARLEN => read3_U0_m_axi_b0_ARLEN,
        m_axi_b0_ARSIZE => read3_U0_m_axi_b0_ARSIZE,
        m_axi_b0_ARBURST => read3_U0_m_axi_b0_ARBURST,
        m_axi_b0_ARLOCK => read3_U0_m_axi_b0_ARLOCK,
        m_axi_b0_ARCACHE => read3_U0_m_axi_b0_ARCACHE,
        m_axi_b0_ARPROT => read3_U0_m_axi_b0_ARPROT,
        m_axi_b0_ARQOS => read3_U0_m_axi_b0_ARQOS,
        m_axi_b0_ARREGION => read3_U0_m_axi_b0_ARREGION,
        m_axi_b0_ARUSER => read3_U0_m_axi_b0_ARUSER,
        m_axi_b0_RVALID => b0_RVALID,
        m_axi_b0_RREADY => read3_U0_m_axi_b0_RREADY,
        m_axi_b0_RDATA => b0_RDATA,
        m_axi_b0_RLAST => b0_RLAST,
        m_axi_b0_RID => b0_RID,
        m_axi_b0_RUSER => b0_RUSER,
        m_axi_b0_RRESP => b0_RRESP,
        m_axi_b0_BVALID => ap_const_logic_0,
        m_axi_b0_BREADY => read3_U0_m_axi_b0_BREADY,
        m_axi_b0_BRESP => ap_const_lv2_0,
        m_axi_b0_BID => ap_const_lv1_0,
        m_axi_b0_BUSER => ap_const_lv1_0,
        m_axi_b1_AWVALID => read3_U0_m_axi_b1_AWVALID,
        m_axi_b1_AWREADY => ap_const_logic_0,
        m_axi_b1_AWADDR => read3_U0_m_axi_b1_AWADDR,
        m_axi_b1_AWID => read3_U0_m_axi_b1_AWID,
        m_axi_b1_AWLEN => read3_U0_m_axi_b1_AWLEN,
        m_axi_b1_AWSIZE => read3_U0_m_axi_b1_AWSIZE,
        m_axi_b1_AWBURST => read3_U0_m_axi_b1_AWBURST,
        m_axi_b1_AWLOCK => read3_U0_m_axi_b1_AWLOCK,
        m_axi_b1_AWCACHE => read3_U0_m_axi_b1_AWCACHE,
        m_axi_b1_AWPROT => read3_U0_m_axi_b1_AWPROT,
        m_axi_b1_AWQOS => read3_U0_m_axi_b1_AWQOS,
        m_axi_b1_AWREGION => read3_U0_m_axi_b1_AWREGION,
        m_axi_b1_AWUSER => read3_U0_m_axi_b1_AWUSER,
        m_axi_b1_WVALID => read3_U0_m_axi_b1_WVALID,
        m_axi_b1_WREADY => ap_const_logic_0,
        m_axi_b1_WDATA => read3_U0_m_axi_b1_WDATA,
        m_axi_b1_WSTRB => read3_U0_m_axi_b1_WSTRB,
        m_axi_b1_WLAST => read3_U0_m_axi_b1_WLAST,
        m_axi_b1_WID => read3_U0_m_axi_b1_WID,
        m_axi_b1_WUSER => read3_U0_m_axi_b1_WUSER,
        m_axi_b1_ARVALID => read3_U0_m_axi_b1_ARVALID,
        m_axi_b1_ARREADY => b1_ARREADY,
        m_axi_b1_ARADDR => read3_U0_m_axi_b1_ARADDR,
        m_axi_b1_ARID => read3_U0_m_axi_b1_ARID,
        m_axi_b1_ARLEN => read3_U0_m_axi_b1_ARLEN,
        m_axi_b1_ARSIZE => read3_U0_m_axi_b1_ARSIZE,
        m_axi_b1_ARBURST => read3_U0_m_axi_b1_ARBURST,
        m_axi_b1_ARLOCK => read3_U0_m_axi_b1_ARLOCK,
        m_axi_b1_ARCACHE => read3_U0_m_axi_b1_ARCACHE,
        m_axi_b1_ARPROT => read3_U0_m_axi_b1_ARPROT,
        m_axi_b1_ARQOS => read3_U0_m_axi_b1_ARQOS,
        m_axi_b1_ARREGION => read3_U0_m_axi_b1_ARREGION,
        m_axi_b1_ARUSER => read3_U0_m_axi_b1_ARUSER,
        m_axi_b1_RVALID => b1_RVALID,
        m_axi_b1_RREADY => read3_U0_m_axi_b1_RREADY,
        m_axi_b1_RDATA => b1_RDATA,
        m_axi_b1_RLAST => b1_RLAST,
        m_axi_b1_RID => b1_RID,
        m_axi_b1_RUSER => b1_RUSER,
        m_axi_b1_RRESP => b1_RRESP,
        m_axi_b1_BVALID => ap_const_logic_0,
        m_axi_b1_BREADY => read3_U0_m_axi_b1_BREADY,
        m_axi_b1_BRESP => ap_const_lv2_0,
        m_axi_b1_BID => ap_const_lv1_0,
        m_axi_b1_BUSER => ap_const_lv1_0,
        A_tmp3_din => read3_U0_A_tmp3_din,
        A_tmp3_full_n => A_tmp_full_n,
        A_tmp3_write => read3_U0_A_tmp3_write,
        B_tmp4_din => read3_U0_B_tmp4_din,
        B_tmp4_full_n => B_tmp_full_n,
        B_tmp4_write => read3_U0_B_tmp4_write,
        A => A,
        B => B,
        C => C,
        C_out_din => read3_U0_C_out_din,
        C_out_full_n => C_c_full_n,
        C_out_write => read3_U0_C_out_write,
        ap_ext_blocking_n => read3_U0_ap_ext_blocking_n,
        ap_str_blocking_n => read3_U0_ap_str_blocking_n,
        ap_int_blocking_n => read3_U0_ap_int_blocking_n);

    execution_U0 : component mmult_fpga_execution
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => execution_U0_ap_start,
        ap_done => execution_U0_ap_done,
        ap_continue => execution_U0_ap_continue,
        ap_idle => execution_U0_ap_idle,
        ap_ready => execution_U0_ap_ready,
        A_tmp_dout => A_tmp_dout,
        A_tmp_empty_n => A_tmp_empty_n,
        A_tmp_read => execution_U0_A_tmp_read,
        B_tmp_dout => B_tmp_dout,
        B_tmp_empty_n => B_tmp_empty_n,
        B_tmp_read => execution_U0_B_tmp_read,
        result_din => execution_U0_result_din,
        result_full_n => result_full_n,
        result_write => execution_U0_result_write,
        ap_ext_blocking_n => execution_U0_ap_ext_blocking_n,
        ap_str_blocking_n => execution_U0_ap_str_blocking_n,
        ap_int_blocking_n => execution_U0_ap_int_blocking_n);

    write_U0 : component mmult_fpga_write_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_U0_ap_start,
        ap_done => write_U0_ap_done,
        ap_continue => write_U0_ap_continue,
        ap_idle => write_U0_ap_idle,
        ap_ready => write_U0_ap_ready,
        result5_dout => result_dout,
        result5_empty_n => result_empty_n,
        result5_read => write_U0_result5_read,
        m_axi_b2_AWVALID => write_U0_m_axi_b2_AWVALID,
        m_axi_b2_AWREADY => b2_AWREADY,
        m_axi_b2_AWADDR => write_U0_m_axi_b2_AWADDR,
        m_axi_b2_AWID => write_U0_m_axi_b2_AWID,
        m_axi_b2_AWLEN => write_U0_m_axi_b2_AWLEN,
        m_axi_b2_AWSIZE => write_U0_m_axi_b2_AWSIZE,
        m_axi_b2_AWBURST => write_U0_m_axi_b2_AWBURST,
        m_axi_b2_AWLOCK => write_U0_m_axi_b2_AWLOCK,
        m_axi_b2_AWCACHE => write_U0_m_axi_b2_AWCACHE,
        m_axi_b2_AWPROT => write_U0_m_axi_b2_AWPROT,
        m_axi_b2_AWQOS => write_U0_m_axi_b2_AWQOS,
        m_axi_b2_AWREGION => write_U0_m_axi_b2_AWREGION,
        m_axi_b2_AWUSER => write_U0_m_axi_b2_AWUSER,
        m_axi_b2_WVALID => write_U0_m_axi_b2_WVALID,
        m_axi_b2_WREADY => b2_WREADY,
        m_axi_b2_WDATA => write_U0_m_axi_b2_WDATA,
        m_axi_b2_WSTRB => write_U0_m_axi_b2_WSTRB,
        m_axi_b2_WLAST => write_U0_m_axi_b2_WLAST,
        m_axi_b2_WID => write_U0_m_axi_b2_WID,
        m_axi_b2_WUSER => write_U0_m_axi_b2_WUSER,
        m_axi_b2_ARVALID => write_U0_m_axi_b2_ARVALID,
        m_axi_b2_ARREADY => ap_const_logic_0,
        m_axi_b2_ARADDR => write_U0_m_axi_b2_ARADDR,
        m_axi_b2_ARID => write_U0_m_axi_b2_ARID,
        m_axi_b2_ARLEN => write_U0_m_axi_b2_ARLEN,
        m_axi_b2_ARSIZE => write_U0_m_axi_b2_ARSIZE,
        m_axi_b2_ARBURST => write_U0_m_axi_b2_ARBURST,
        m_axi_b2_ARLOCK => write_U0_m_axi_b2_ARLOCK,
        m_axi_b2_ARCACHE => write_U0_m_axi_b2_ARCACHE,
        m_axi_b2_ARPROT => write_U0_m_axi_b2_ARPROT,
        m_axi_b2_ARQOS => write_U0_m_axi_b2_ARQOS,
        m_axi_b2_ARREGION => write_U0_m_axi_b2_ARREGION,
        m_axi_b2_ARUSER => write_U0_m_axi_b2_ARUSER,
        m_axi_b2_RVALID => ap_const_logic_0,
        m_axi_b2_RREADY => write_U0_m_axi_b2_RREADY,
        m_axi_b2_RDATA => ap_const_lv512_lc_1,
        m_axi_b2_RLAST => ap_const_logic_0,
        m_axi_b2_RID => ap_const_lv1_0,
        m_axi_b2_RUSER => ap_const_lv1_0,
        m_axi_b2_RRESP => ap_const_lv2_0,
        m_axi_b2_BVALID => b2_BVALID,
        m_axi_b2_BREADY => write_U0_m_axi_b2_BREADY,
        m_axi_b2_BRESP => b2_BRESP,
        m_axi_b2_BID => b2_BID,
        m_axi_b2_BUSER => b2_BUSER,
        output_r_dout => C_c_dout,
        output_r_empty_n => C_c_empty_n,
        output_r_read => write_U0_output_r_read,
        ap_ext_blocking_n => write_U0_ap_ext_blocking_n,
        ap_str_blocking_n => write_U0_ap_str_blocking_n,
        ap_int_blocking_n => write_U0_ap_int_blocking_n);

    A_tmp_U : component mmult_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read3_U0_A_tmp3_din,
        if_full_n => A_tmp_full_n,
        if_write => read3_U0_A_tmp3_write,
        if_dout => A_tmp_dout,
        if_empty_n => A_tmp_empty_n,
        if_read => execution_U0_A_tmp_read);

    B_tmp_U : component mmult_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read3_U0_B_tmp4_din,
        if_full_n => B_tmp_full_n,
        if_write => read3_U0_B_tmp4_write,
        if_dout => B_tmp_dout,
        if_empty_n => B_tmp_empty_n,
        if_read => execution_U0_B_tmp_read);

    C_c_U : component mmult_fpga_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read3_U0_C_out_din,
        if_full_n => C_c_full_n,
        if_write => read3_U0_C_out_write,
        if_dout => C_c_dout,
        if_empty_n => C_c_empty_n,
        if_read => write_U0_output_r_read);

    result_U : component mmult_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execution_U0_result_din,
        if_full_n => result_full_n,
        if_write => execution_U0_result_write,
        if_dout => result_dout,
        if_empty_n => result_empty_n,
        if_read => write_U0_result5_read);

    start_for_execution_U0_U : component mmult_fpga_start_for_execution_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_execution_U0_din,
        if_full_n => start_for_execution_U0_full_n,
        if_write => read3_U0_start_write,
        if_dout => start_for_execution_U0_dout,
        if_empty_n => start_for_execution_U0_empty_n,
        if_read => execution_U0_ap_ready);

    start_for_write_U0_U : component mmult_fpga_start_for_write_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_U0_din,
        if_full_n => start_for_write_U0_full_n,
        if_write => read3_U0_start_write,
        if_dout => start_for_write_U0_dout,
        if_empty_n => start_for_write_U0_empty_n,
        if_read => write_U0_ap_ready);





    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;
    ap_done <= write_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (write_U0_ap_ext_blocking_n and read3_U0_ap_ext_blocking_n and execution_U0_ap_ext_blocking_n);
    ap_idle <= (write_U0_ap_idle and read3_U0_ap_idle and execution_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (write_U0_ap_int_blocking_n and read3_U0_ap_int_blocking_n and execution_U0_ap_int_blocking_n);
    ap_ready <= read3_U0_ap_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (write_U0_ap_str_blocking_n and read3_U0_ap_str_blocking_n and execution_U0_ap_str_blocking_n);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= write_U0_ap_done;
    ap_sync_ready <= read3_U0_ap_ready;
    event_done <= ap_done;
    execution_U0_ap_continue <= ap_const_logic_1;
    execution_U0_ap_start <= start_for_execution_U0_empty_n;
    execution_U0_start_full_n <= ap_const_logic_1;
    execution_U0_start_write <= ap_const_logic_0;
    read3_U0_ap_continue <= ap_const_logic_1;
    read3_U0_ap_start <= ap_start;
    read3_U0_start_full_n <= (start_for_write_U0_full_n and start_for_execution_U0_full_n);

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    start_for_execution_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_U0_ap_continue <= ap_continue;
    write_U0_ap_start <= start_for_write_U0_empty_n;
    write_U0_start_full_n <= ap_const_logic_1;
    write_U0_start_write <= ap_const_logic_0;
end behav;
