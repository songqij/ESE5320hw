// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_fpga_read3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_b0_AWVALID,
        m_axi_b0_AWREADY,
        m_axi_b0_AWADDR,
        m_axi_b0_AWID,
        m_axi_b0_AWLEN,
        m_axi_b0_AWSIZE,
        m_axi_b0_AWBURST,
        m_axi_b0_AWLOCK,
        m_axi_b0_AWCACHE,
        m_axi_b0_AWPROT,
        m_axi_b0_AWQOS,
        m_axi_b0_AWREGION,
        m_axi_b0_AWUSER,
        m_axi_b0_WVALID,
        m_axi_b0_WREADY,
        m_axi_b0_WDATA,
        m_axi_b0_WSTRB,
        m_axi_b0_WLAST,
        m_axi_b0_WID,
        m_axi_b0_WUSER,
        m_axi_b0_ARVALID,
        m_axi_b0_ARREADY,
        m_axi_b0_ARADDR,
        m_axi_b0_ARID,
        m_axi_b0_ARLEN,
        m_axi_b0_ARSIZE,
        m_axi_b0_ARBURST,
        m_axi_b0_ARLOCK,
        m_axi_b0_ARCACHE,
        m_axi_b0_ARPROT,
        m_axi_b0_ARQOS,
        m_axi_b0_ARREGION,
        m_axi_b0_ARUSER,
        m_axi_b0_RVALID,
        m_axi_b0_RREADY,
        m_axi_b0_RDATA,
        m_axi_b0_RLAST,
        m_axi_b0_RID,
        m_axi_b0_RUSER,
        m_axi_b0_RRESP,
        m_axi_b0_BVALID,
        m_axi_b0_BREADY,
        m_axi_b0_BRESP,
        m_axi_b0_BID,
        m_axi_b0_BUSER,
        m_axi_b1_AWVALID,
        m_axi_b1_AWREADY,
        m_axi_b1_AWADDR,
        m_axi_b1_AWID,
        m_axi_b1_AWLEN,
        m_axi_b1_AWSIZE,
        m_axi_b1_AWBURST,
        m_axi_b1_AWLOCK,
        m_axi_b1_AWCACHE,
        m_axi_b1_AWPROT,
        m_axi_b1_AWQOS,
        m_axi_b1_AWREGION,
        m_axi_b1_AWUSER,
        m_axi_b1_WVALID,
        m_axi_b1_WREADY,
        m_axi_b1_WDATA,
        m_axi_b1_WSTRB,
        m_axi_b1_WLAST,
        m_axi_b1_WID,
        m_axi_b1_WUSER,
        m_axi_b1_ARVALID,
        m_axi_b1_ARREADY,
        m_axi_b1_ARADDR,
        m_axi_b1_ARID,
        m_axi_b1_ARLEN,
        m_axi_b1_ARSIZE,
        m_axi_b1_ARBURST,
        m_axi_b1_ARLOCK,
        m_axi_b1_ARCACHE,
        m_axi_b1_ARPROT,
        m_axi_b1_ARQOS,
        m_axi_b1_ARREGION,
        m_axi_b1_ARUSER,
        m_axi_b1_RVALID,
        m_axi_b1_RREADY,
        m_axi_b1_RDATA,
        m_axi_b1_RLAST,
        m_axi_b1_RID,
        m_axi_b1_RUSER,
        m_axi_b1_RRESP,
        m_axi_b1_BVALID,
        m_axi_b1_BREADY,
        m_axi_b1_BRESP,
        m_axi_b1_BID,
        m_axi_b1_BUSER,
        A_tmp3_din,
        A_tmp3_full_n,
        A_tmp3_write,
        B_tmp4_din,
        B_tmp4_full_n,
        B_tmp4_write,
        A,
        B,
        C,
        C_out_din,
        C_out_full_n,
        C_out_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 72'd1;
parameter    ap_ST_fsm_state2 = 72'd2;
parameter    ap_ST_fsm_state3 = 72'd4;
parameter    ap_ST_fsm_state4 = 72'd8;
parameter    ap_ST_fsm_state5 = 72'd16;
parameter    ap_ST_fsm_state6 = 72'd32;
parameter    ap_ST_fsm_state7 = 72'd64;
parameter    ap_ST_fsm_state8 = 72'd128;
parameter    ap_ST_fsm_state9 = 72'd256;
parameter    ap_ST_fsm_state10 = 72'd512;
parameter    ap_ST_fsm_state11 = 72'd1024;
parameter    ap_ST_fsm_state12 = 72'd2048;
parameter    ap_ST_fsm_state13 = 72'd4096;
parameter    ap_ST_fsm_state14 = 72'd8192;
parameter    ap_ST_fsm_state15 = 72'd16384;
parameter    ap_ST_fsm_state16 = 72'd32768;
parameter    ap_ST_fsm_state17 = 72'd65536;
parameter    ap_ST_fsm_state18 = 72'd131072;
parameter    ap_ST_fsm_state19 = 72'd262144;
parameter    ap_ST_fsm_state20 = 72'd524288;
parameter    ap_ST_fsm_state21 = 72'd1048576;
parameter    ap_ST_fsm_state22 = 72'd2097152;
parameter    ap_ST_fsm_state23 = 72'd4194304;
parameter    ap_ST_fsm_state24 = 72'd8388608;
parameter    ap_ST_fsm_state25 = 72'd16777216;
parameter    ap_ST_fsm_state26 = 72'd33554432;
parameter    ap_ST_fsm_state27 = 72'd67108864;
parameter    ap_ST_fsm_state28 = 72'd134217728;
parameter    ap_ST_fsm_state29 = 72'd268435456;
parameter    ap_ST_fsm_state30 = 72'd536870912;
parameter    ap_ST_fsm_state31 = 72'd1073741824;
parameter    ap_ST_fsm_state32 = 72'd2147483648;
parameter    ap_ST_fsm_state33 = 72'd4294967296;
parameter    ap_ST_fsm_state34 = 72'd8589934592;
parameter    ap_ST_fsm_state35 = 72'd17179869184;
parameter    ap_ST_fsm_state36 = 72'd34359738368;
parameter    ap_ST_fsm_state37 = 72'd68719476736;
parameter    ap_ST_fsm_state38 = 72'd137438953472;
parameter    ap_ST_fsm_state39 = 72'd274877906944;
parameter    ap_ST_fsm_state40 = 72'd549755813888;
parameter    ap_ST_fsm_state41 = 72'd1099511627776;
parameter    ap_ST_fsm_state42 = 72'd2199023255552;
parameter    ap_ST_fsm_state43 = 72'd4398046511104;
parameter    ap_ST_fsm_state44 = 72'd8796093022208;
parameter    ap_ST_fsm_state45 = 72'd17592186044416;
parameter    ap_ST_fsm_state46 = 72'd35184372088832;
parameter    ap_ST_fsm_state47 = 72'd70368744177664;
parameter    ap_ST_fsm_state48 = 72'd140737488355328;
parameter    ap_ST_fsm_state49 = 72'd281474976710656;
parameter    ap_ST_fsm_state50 = 72'd562949953421312;
parameter    ap_ST_fsm_state51 = 72'd1125899906842624;
parameter    ap_ST_fsm_state52 = 72'd2251799813685248;
parameter    ap_ST_fsm_state53 = 72'd4503599627370496;
parameter    ap_ST_fsm_state54 = 72'd9007199254740992;
parameter    ap_ST_fsm_state55 = 72'd18014398509481984;
parameter    ap_ST_fsm_state56 = 72'd36028797018963968;
parameter    ap_ST_fsm_state57 = 72'd72057594037927936;
parameter    ap_ST_fsm_state58 = 72'd144115188075855872;
parameter    ap_ST_fsm_state59 = 72'd288230376151711744;
parameter    ap_ST_fsm_state60 = 72'd576460752303423488;
parameter    ap_ST_fsm_state61 = 72'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 72'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 72'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 72'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 72'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 72'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 72'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 72'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 72'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 72'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage0 = 72'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 72'd2361183241434822606848;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_b0_AWVALID;
input   m_axi_b0_AWREADY;
output  [63:0] m_axi_b0_AWADDR;
output  [0:0] m_axi_b0_AWID;
output  [31:0] m_axi_b0_AWLEN;
output  [2:0] m_axi_b0_AWSIZE;
output  [1:0] m_axi_b0_AWBURST;
output  [1:0] m_axi_b0_AWLOCK;
output  [3:0] m_axi_b0_AWCACHE;
output  [2:0] m_axi_b0_AWPROT;
output  [3:0] m_axi_b0_AWQOS;
output  [3:0] m_axi_b0_AWREGION;
output  [0:0] m_axi_b0_AWUSER;
output   m_axi_b0_WVALID;
input   m_axi_b0_WREADY;
output  [511:0] m_axi_b0_WDATA;
output  [63:0] m_axi_b0_WSTRB;
output   m_axi_b0_WLAST;
output  [0:0] m_axi_b0_WID;
output  [0:0] m_axi_b0_WUSER;
output   m_axi_b0_ARVALID;
input   m_axi_b0_ARREADY;
output  [63:0] m_axi_b0_ARADDR;
output  [0:0] m_axi_b0_ARID;
output  [31:0] m_axi_b0_ARLEN;
output  [2:0] m_axi_b0_ARSIZE;
output  [1:0] m_axi_b0_ARBURST;
output  [1:0] m_axi_b0_ARLOCK;
output  [3:0] m_axi_b0_ARCACHE;
output  [2:0] m_axi_b0_ARPROT;
output  [3:0] m_axi_b0_ARQOS;
output  [3:0] m_axi_b0_ARREGION;
output  [0:0] m_axi_b0_ARUSER;
input   m_axi_b0_RVALID;
output   m_axi_b0_RREADY;
input  [511:0] m_axi_b0_RDATA;
input   m_axi_b0_RLAST;
input  [0:0] m_axi_b0_RID;
input  [0:0] m_axi_b0_RUSER;
input  [1:0] m_axi_b0_RRESP;
input   m_axi_b0_BVALID;
output   m_axi_b0_BREADY;
input  [1:0] m_axi_b0_BRESP;
input  [0:0] m_axi_b0_BID;
input  [0:0] m_axi_b0_BUSER;
output   m_axi_b1_AWVALID;
input   m_axi_b1_AWREADY;
output  [63:0] m_axi_b1_AWADDR;
output  [0:0] m_axi_b1_AWID;
output  [31:0] m_axi_b1_AWLEN;
output  [2:0] m_axi_b1_AWSIZE;
output  [1:0] m_axi_b1_AWBURST;
output  [1:0] m_axi_b1_AWLOCK;
output  [3:0] m_axi_b1_AWCACHE;
output  [2:0] m_axi_b1_AWPROT;
output  [3:0] m_axi_b1_AWQOS;
output  [3:0] m_axi_b1_AWREGION;
output  [0:0] m_axi_b1_AWUSER;
output   m_axi_b1_WVALID;
input   m_axi_b1_WREADY;
output  [511:0] m_axi_b1_WDATA;
output  [63:0] m_axi_b1_WSTRB;
output   m_axi_b1_WLAST;
output  [0:0] m_axi_b1_WID;
output  [0:0] m_axi_b1_WUSER;
output   m_axi_b1_ARVALID;
input   m_axi_b1_ARREADY;
output  [63:0] m_axi_b1_ARADDR;
output  [0:0] m_axi_b1_ARID;
output  [31:0] m_axi_b1_ARLEN;
output  [2:0] m_axi_b1_ARSIZE;
output  [1:0] m_axi_b1_ARBURST;
output  [1:0] m_axi_b1_ARLOCK;
output  [3:0] m_axi_b1_ARCACHE;
output  [2:0] m_axi_b1_ARPROT;
output  [3:0] m_axi_b1_ARQOS;
output  [3:0] m_axi_b1_ARREGION;
output  [0:0] m_axi_b1_ARUSER;
input   m_axi_b1_RVALID;
output   m_axi_b1_RREADY;
input  [511:0] m_axi_b1_RDATA;
input   m_axi_b1_RLAST;
input  [0:0] m_axi_b1_RID;
input  [0:0] m_axi_b1_RUSER;
input  [1:0] m_axi_b1_RRESP;
input   m_axi_b1_BVALID;
output   m_axi_b1_BREADY;
input  [1:0] m_axi_b1_BRESP;
input  [0:0] m_axi_b1_BID;
input  [0:0] m_axi_b1_BUSER;
output  [31:0] A_tmp3_din;
input   A_tmp3_full_n;
output   A_tmp3_write;
output  [31:0] B_tmp4_din;
input   B_tmp4_full_n;
output   B_tmp4_write;
input  [63:0] A;
input  [63:0] B;
input  [63:0] C;
output  [63:0] C_out_din;
input   C_out_full_n;
output   C_out_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_b0_ARVALID;
reg m_axi_b0_RREADY;
reg m_axi_b1_ARVALID;
reg m_axi_b1_RREADY;
reg[31:0] A_tmp3_din;
reg A_tmp3_write;
reg B_tmp4_write;
reg C_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [71:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    b0_blk_n_AR;
reg    b0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln49_reg_334;
reg   [0:0] icmp_ln174_reg_338;
reg    b1_blk_n_AR;
reg    b1_blk_n_R;
reg    A_tmp3_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln49_reg_334_pp0_iter1_reg;
reg   [0:0] icmp_ln174_reg_338_pp0_iter1_reg;
reg    B_tmp4_blk_n;
reg    C_out_blk_n;
reg   [17:0] c_reg_156;
reg   [479:0] shiftreg_i_i_reg_167;
reg   [479:0] shiftreg2_i_i_reg_179;
wire   [17:0] add_ln49_fu_251_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state71_pp0_stage0_iter0;
reg    ap_predicate_op254_read_state72;
reg    ap_predicate_op256_read_state72;
reg    ap_block_state72_pp0_stage0_iter1;
reg    ap_predicate_op261_write_state73;
reg    ap_predicate_op263_write_state73;
reg    ap_block_state73_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln49_fu_257_p2;
wire   [0:0] icmp_ln174_fu_267_p2;
reg   [511:0] b0_addr_read_reg_342;
wire   [31:0] trunc_ln174_fu_273_p1;
reg   [31:0] trunc_ln174_reg_347;
reg   [511:0] b1_addr_read_reg_352;
wire    ap_CS_fsm_state70;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state72;
reg   [511:0] ap_phi_mux_p_in_i_i_phi_fu_194_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_p_in_i_i_reg_191;
wire   [511:0] shiftreg_cast_i_i_fu_282_p1;
reg   [511:0] ap_phi_mux_empty_37_phi_fu_203_p4;
wire   [511:0] ap_phi_reg_pp0_iter2_empty_37_reg_200;
wire   [511:0] shiftreg2_cast_i_i_fu_277_p1;
wire  signed [63:0] sext_ln49_fu_219_p1;
wire  signed [63:0] sext_ln49_1_fu_240_p1;
reg    ap_block_state1;
reg    ap_block_state1_io;
wire   [31:0] trunc_ln174_1_fu_287_p1;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] trunc_ln_fu_209_p4;
wire   [57:0] trunc_ln49_1_fu_230_p4;
wire   [3:0] empty_36_fu_263_p1;
wire    ap_CS_fsm_state74;
reg   [71:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 72'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state74)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state70) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state72)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state72))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        c_reg_156 <= 18'd0;
    end else if (((icmp_ln49_fu_257_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_reg_156 <= add_ln49_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        shiftreg2_i_i_reg_179 <= 480'd0;
    end else if (((icmp_ln49_reg_334_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg2_i_i_reg_179 <= {{ap_phi_mux_empty_37_phi_fu_203_p4[511:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        shiftreg_i_i_reg_167 <= 480'd0;
    end else if (((icmp_ln49_reg_334_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_i_i_reg_167 <= {{ap_phi_mux_p_in_i_i_phi_fu_194_p4[511:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op254_read_state72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b0_addr_read_reg_342 <= m_axi_b0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op256_read_state72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b1_addr_read_reg_352 <= m_axi_b1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_257_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln174_reg_338 <= icmp_ln174_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln174_reg_338_pp0_iter1_reg <= icmp_ln174_reg_338;
        icmp_ln49_reg_334 <= icmp_ln49_fu_257_p2;
        icmp_ln49_reg_334_pp0_iter1_reg <= icmp_ln49_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_reg_338 == 1'd1) & (icmp_ln49_reg_334 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln174_reg_347 <= trunc_ln174_fu_273_p1;
    end
end

always @ (*) begin
    if ((((icmp_ln174_reg_338_pp0_iter1_reg == 1'd1) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd0) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        A_tmp3_blk_n = A_tmp3_full_n;
    end else begin
        A_tmp3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op263_write_state73 == 1'b1)) begin
            A_tmp3_din = trunc_ln174_reg_347;
        end else if ((ap_predicate_op261_write_state73 == 1'b1)) begin
            A_tmp3_din = trunc_ln174_1_fu_287_p1;
        end else begin
            A_tmp3_din = 'bx;
        end
    end else begin
        A_tmp3_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op263_write_state73 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op261_write_state73 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        A_tmp3_write = 1'b1;
    end else begin
        A_tmp3_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_334_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        B_tmp4_blk_n = B_tmp4_full_n;
    end else begin
        B_tmp4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_334_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_tmp4_write = 1'b1;
    end else begin
        B_tmp4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_out_blk_n = C_out_full_n;
    end else begin
        C_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_io) | (real_start == 1'b0) | (1'b0 == C_out_full_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_out_write = 1'b1;
    end else begin
        C_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state72 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state72 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_257_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln49_reg_334_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_37_phi_fu_203_p4 = shiftreg2_cast_i_i_fu_277_p1;
        end else if ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_37_phi_fu_203_p4 = b1_addr_read_reg_352;
        end else begin
            ap_phi_mux_empty_37_phi_fu_203_p4 = ap_phi_reg_pp0_iter2_empty_37_reg_200;
        end
    end else begin
        ap_phi_mux_empty_37_phi_fu_203_p4 = ap_phi_reg_pp0_iter2_empty_37_reg_200;
    end
end

always @ (*) begin
    if ((icmp_ln49_reg_334_pp0_iter1_reg == 1'd0)) begin
        if ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_p_in_i_i_phi_fu_194_p4 = shiftreg_cast_i_i_fu_282_p1;
        end else if ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_p_in_i_i_phi_fu_194_p4 = b0_addr_read_reg_342;
        end else begin
            ap_phi_mux_p_in_i_i_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_p_in_i_i_reg_191;
        end
    end else begin
        ap_phi_mux_p_in_i_i_phi_fu_194_p4 = ap_phi_reg_pp0_iter2_p_in_i_i_reg_191;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b0_blk_n_AR = m_axi_b0_ARREADY;
    end else begin
        b0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln174_reg_338 == 1'd1) & (icmp_ln49_reg_334 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b0_blk_n_R = m_axi_b0_RVALID;
    end else begin
        b0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b1_blk_n_AR = m_axi_b1_ARREADY;
    end else begin
        b1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln174_reg_338 == 1'd1) & (icmp_ln49_reg_334 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b1_blk_n_R = m_axi_b1_RVALID;
    end else begin
        b1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_io) | (real_start == 1'b0) | (1'b0 == C_out_full_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_b0_ARVALID = 1'b1;
    end else begin
        m_axi_b0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op254_read_state72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_b0_RREADY = 1'b1;
    end else begin
        m_axi_b0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_io) | (real_start == 1'b0) | (1'b0 == C_out_full_n)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_b1_ARVALID = 1'b1;
    end else begin
        m_axi_b1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op256_read_state72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_b1_RREADY = 1'b1;
    end else begin
        m_axi_b1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b1 == ap_block_state1_io) | (real_start == 1'b0) | (1'b0 == C_out_full_n)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_tmp4_din = ap_phi_mux_empty_37_phi_fu_203_p4[31:0];

assign C_out_din = C;

assign add_ln49_fu_251_p2 = (c_reg_156 + 18'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd71];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == B_tmp4_full_n) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0)) | ((ap_predicate_op263_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)) | ((ap_predicate_op261_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op256_read_state72 == 1'b1) & (m_axi_b1_RVALID == 1'b0)) | ((ap_predicate_op254_read_state72 == 1'b1) & (m_axi_b0_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == B_tmp4_full_n) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0)) | ((ap_predicate_op263_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)) | ((ap_predicate_op261_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op256_read_state72 == 1'b1) & (m_axi_b1_RVALID == 1'b0)) | ((ap_predicate_op254_read_state72 == 1'b1) & (m_axi_b0_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'b0 == B_tmp4_full_n) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0)) | ((ap_predicate_op263_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)) | ((ap_predicate_op261_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op256_read_state72 == 1'b1) & (m_axi_b1_RVALID == 1'b0)) | ((ap_predicate_op254_read_state72 == 1'b1) & (m_axi_b0_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == C_out_full_n));
end

always @ (*) begin
    ap_block_state1_io = ((m_axi_b1_ARREADY == 1'b0) | (m_axi_b0_ARREADY == 1'b0));
end

assign ap_block_state71_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp0_stage0_iter1 = (((ap_predicate_op256_read_state72 == 1'b1) & (m_axi_b1_RVALID == 1'b0)) | ((ap_predicate_op254_read_state72 == 1'b1) & (m_axi_b0_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state73_pp0_stage0_iter2 = (((1'b0 == B_tmp4_full_n) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0)) | ((ap_predicate_op263_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)) | ((ap_predicate_op261_write_state73 == 1'b1) & (1'b0 == A_tmp3_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (b1_blk_n_R & b1_blk_n_AR & b0_blk_n_R & b0_blk_n_AR);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (C_out_blk_n & B_tmp4_blk_n & A_tmp3_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_phi_reg_pp0_iter2_empty_37_reg_200 = 'bx;

assign ap_phi_reg_pp0_iter2_p_in_i_i_reg_191 = 'bx;

always @ (*) begin
    ap_predicate_op254_read_state72 = ((icmp_ln174_reg_338 == 1'd1) & (icmp_ln49_reg_334 == 1'd0));
end

always @ (*) begin
    ap_predicate_op256_read_state72 = ((icmp_ln174_reg_338 == 1'd1) & (icmp_ln49_reg_334 == 1'd0));
end

always @ (*) begin
    ap_predicate_op261_write_state73 = ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd0) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op263_write_state73 = ((icmp_ln174_reg_338_pp0_iter1_reg == 1'd1) & (icmp_ln49_reg_334_pp0_iter1_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign empty_36_fu_263_p1 = c_reg_156[3:0];

assign icmp_ln174_fu_267_p2 = ((empty_36_fu_263_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_257_p2 = ((c_reg_156 == 18'd133120) ? 1'b1 : 1'b0);

assign m_axi_b0_ARADDR = sext_ln49_fu_219_p1;

assign m_axi_b0_ARBURST = 2'd0;

assign m_axi_b0_ARCACHE = 4'd0;

assign m_axi_b0_ARID = 1'd0;

assign m_axi_b0_ARLEN = 32'd8320;

assign m_axi_b0_ARLOCK = 2'd0;

assign m_axi_b0_ARPROT = 3'd0;

assign m_axi_b0_ARQOS = 4'd0;

assign m_axi_b0_ARREGION = 4'd0;

assign m_axi_b0_ARSIZE = 3'd0;

assign m_axi_b0_ARUSER = 1'd0;

assign m_axi_b0_AWADDR = 64'd0;

assign m_axi_b0_AWBURST = 2'd0;

assign m_axi_b0_AWCACHE = 4'd0;

assign m_axi_b0_AWID = 1'd0;

assign m_axi_b0_AWLEN = 32'd0;

assign m_axi_b0_AWLOCK = 2'd0;

assign m_axi_b0_AWPROT = 3'd0;

assign m_axi_b0_AWQOS = 4'd0;

assign m_axi_b0_AWREGION = 4'd0;

assign m_axi_b0_AWSIZE = 3'd0;

assign m_axi_b0_AWUSER = 1'd0;

assign m_axi_b0_AWVALID = 1'b0;

assign m_axi_b0_BREADY = 1'b0;

assign m_axi_b0_WDATA = 512'd0;

assign m_axi_b0_WID = 1'd0;

assign m_axi_b0_WLAST = 1'b0;

assign m_axi_b0_WSTRB = 64'd0;

assign m_axi_b0_WUSER = 1'd0;

assign m_axi_b0_WVALID = 1'b0;

assign m_axi_b1_ARADDR = sext_ln49_1_fu_240_p1;

assign m_axi_b1_ARBURST = 2'd0;

assign m_axi_b1_ARCACHE = 4'd0;

assign m_axi_b1_ARID = 1'd0;

assign m_axi_b1_ARLEN = 32'd8320;

assign m_axi_b1_ARLOCK = 2'd0;

assign m_axi_b1_ARPROT = 3'd0;

assign m_axi_b1_ARQOS = 4'd0;

assign m_axi_b1_ARREGION = 4'd0;

assign m_axi_b1_ARSIZE = 3'd0;

assign m_axi_b1_ARUSER = 1'd0;

assign m_axi_b1_AWADDR = 64'd0;

assign m_axi_b1_AWBURST = 2'd0;

assign m_axi_b1_AWCACHE = 4'd0;

assign m_axi_b1_AWID = 1'd0;

assign m_axi_b1_AWLEN = 32'd0;

assign m_axi_b1_AWLOCK = 2'd0;

assign m_axi_b1_AWPROT = 3'd0;

assign m_axi_b1_AWQOS = 4'd0;

assign m_axi_b1_AWREGION = 4'd0;

assign m_axi_b1_AWSIZE = 3'd0;

assign m_axi_b1_AWUSER = 1'd0;

assign m_axi_b1_AWVALID = 1'b0;

assign m_axi_b1_BREADY = 1'b0;

assign m_axi_b1_WDATA = 512'd0;

assign m_axi_b1_WID = 1'd0;

assign m_axi_b1_WLAST = 1'b0;

assign m_axi_b1_WSTRB = 64'd0;

assign m_axi_b1_WUSER = 1'd0;

assign m_axi_b1_WVALID = 1'b0;

assign sext_ln49_1_fu_240_p1 = $signed(trunc_ln49_1_fu_230_p4);

assign sext_ln49_fu_219_p1 = $signed(trunc_ln_fu_209_p4);

assign shiftreg2_cast_i_i_fu_277_p1 = shiftreg2_i_i_reg_179;

assign shiftreg_cast_i_i_fu_282_p1 = shiftreg_i_i_reg_167;

assign start_out = real_start;

assign trunc_ln174_1_fu_287_p1 = shiftreg_i_i_reg_167[31:0];

assign trunc_ln174_fu_273_p1 = m_axi_b0_RDATA[31:0];

assign trunc_ln49_1_fu_230_p4 = {{B[63:6]}};

assign trunc_ln_fu_209_p4 = {{A[63:6]}};

endmodule //mmult_fpga_read3
