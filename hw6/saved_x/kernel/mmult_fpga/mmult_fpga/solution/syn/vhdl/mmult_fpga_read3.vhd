-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_fpga_read3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_b0_AWVALID : OUT STD_LOGIC;
    m_axi_b0_AWREADY : IN STD_LOGIC;
    m_axi_b0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_b0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_b0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_WVALID : OUT STD_LOGIC;
    m_axi_b0_WREADY : IN STD_LOGIC;
    m_axi_b0_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_b0_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_b0_WLAST : OUT STD_LOGIC;
    m_axi_b0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_ARVALID : OUT STD_LOGIC;
    m_axi_b0_ARREADY : IN STD_LOGIC;
    m_axi_b0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_b0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_b0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_RVALID : IN STD_LOGIC;
    m_axi_b0_RREADY : OUT STD_LOGIC;
    m_axi_b0_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_b0_RLAST : IN STD_LOGIC;
    m_axi_b0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_BVALID : IN STD_LOGIC;
    m_axi_b0_BREADY : OUT STD_LOGIC;
    m_axi_b0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_AWVALID : OUT STD_LOGIC;
    m_axi_b1_AWREADY : IN STD_LOGIC;
    m_axi_b1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_b1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_b1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_WVALID : OUT STD_LOGIC;
    m_axi_b1_WREADY : IN STD_LOGIC;
    m_axi_b1_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_b1_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_b1_WLAST : OUT STD_LOGIC;
    m_axi_b1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_ARVALID : OUT STD_LOGIC;
    m_axi_b1_ARREADY : IN STD_LOGIC;
    m_axi_b1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_b1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_b1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_b1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_b1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_RVALID : IN STD_LOGIC;
    m_axi_b1_RREADY : OUT STD_LOGIC;
    m_axi_b1_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_b1_RLAST : IN STD_LOGIC;
    m_axi_b1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_BVALID : IN STD_LOGIC;
    m_axi_b1_BREADY : OUT STD_LOGIC;
    m_axi_b1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_b1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_b1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_tmp3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_tmp3_full_n : IN STD_LOGIC;
    A_tmp3_write : OUT STD_LOGIC;
    B_tmp4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_tmp4_full_n : IN STD_LOGIC;
    B_tmp4_write : OUT STD_LOGIC;
    A : IN STD_LOGIC_VECTOR (63 downto 0);
    B : IN STD_LOGIC_VECTOR (63 downto 0);
    C : IN STD_LOGIC_VECTOR (63 downto 0);
    C_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    C_out_full_n : IN STD_LOGIC;
    C_out_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of mmult_fpga_read3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv480_lc_1 : STD_LOGIC_VECTOR (479 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2080 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000010000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv18_20800 : STD_LOGIC_VECTOR (17 downto 0) := "100000100000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal b0_blk_n_AR : STD_LOGIC;
    signal b0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln49_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal b1_blk_n_AR : STD_LOGIC;
    signal b1_blk_n_R : STD_LOGIC;
    signal A_tmp3_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln49_reg_334_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_338_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_tmp4_blk_n : STD_LOGIC;
    signal C_out_blk_n : STD_LOGIC;
    signal c_reg_156 : STD_LOGIC_VECTOR (17 downto 0);
    signal shiftreg_i_i_reg_167 : STD_LOGIC_VECTOR (479 downto 0);
    signal shiftreg2_i_i_reg_179 : STD_LOGIC_VECTOR (479 downto 0);
    signal add_ln49_fu_251_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state71_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op254_read_state72 : BOOLEAN;
    signal ap_predicate_op256_read_state72 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op261_write_state73 : BOOLEAN;
    signal ap_predicate_op263_write_state73 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln49_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b0_addr_read_reg_342 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln174_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln174_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_addr_read_reg_352 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state72 : STD_LOGIC;
    signal ap_phi_mux_p_in_i_i_phi_fu_194_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_p_in_i_i_reg_191 : STD_LOGIC_VECTOR (511 downto 0);
    signal shiftreg_cast_i_i_fu_282_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_empty_37_phi_fu_203_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_37_reg_200 : STD_LOGIC_VECTOR (511 downto 0);
    signal shiftreg2_cast_i_i_fu_277_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal sext_ln49_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_1_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal trunc_ln174_1_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln_fu_209_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal trunc_ln49_1_fu_230_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal empty_36_fu_263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state70) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state72)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state72))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                c_reg_156 <= ap_const_lv18_0;
            elsif (((icmp_ln49_fu_257_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_reg_156 <= add_ln49_fu_251_p2;
            end if; 
        end if;
    end process;

    shiftreg2_i_i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                shiftreg2_i_i_reg_179 <= ap_const_lv480_lc_1;
            elsif (((icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                shiftreg2_i_i_reg_179 <= ap_phi_mux_empty_37_phi_fu_203_p4(511 downto 32);
            end if; 
        end if;
    end process;

    shiftreg_i_i_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                shiftreg_i_i_reg_167 <= ap_const_lv480_lc_1;
            elsif (((icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                shiftreg_i_i_reg_167 <= ap_phi_mux_p_in_i_i_phi_fu_194_p4(511 downto 32);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op254_read_state72 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b0_addr_read_reg_342 <= m_axi_b0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op256_read_state72 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b1_addr_read_reg_352 <= m_axi_b1_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln174_reg_338 <= icmp_ln174_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln174_reg_338_pp0_iter1_reg <= icmp_ln174_reg_338;
                icmp_ln49_reg_334 <= icmp_ln49_fu_257_p2;
                icmp_ln49_reg_334_pp0_iter1_reg <= icmp_ln49_reg_334;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln174_reg_338 = ap_const_lv1_1) and (icmp_ln49_reg_334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln174_reg_347 <= trunc_ln174_fu_273_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, C_out_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_state1_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = C_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_tmp3_blk_n_assign_proc : process(A_tmp3_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln49_reg_334_pp0_iter1_reg, icmp_ln174_reg_338_pp0_iter1_reg)
    begin
        if ((((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            A_tmp3_blk_n <= A_tmp3_full_n;
        else 
            A_tmp3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_tmp3_din_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op261_write_state73, ap_predicate_op263_write_state73, trunc_ln174_reg_347, trunc_ln174_1_fu_287_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((ap_predicate_op263_write_state73 = ap_const_boolean_1)) then 
                A_tmp3_din <= trunc_ln174_reg_347;
            elsif ((ap_predicate_op261_write_state73 = ap_const_boolean_1)) then 
                A_tmp3_din <= trunc_ln174_1_fu_287_p1;
            else 
                A_tmp3_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            A_tmp3_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_tmp3_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op261_write_state73, ap_predicate_op263_write_state73, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op263_write_state73 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op261_write_state73 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            A_tmp3_write <= ap_const_logic_1;
        else 
            A_tmp3_write <= ap_const_logic_0;
        end if; 
    end process;


    B_tmp4_blk_n_assign_proc : process(B_tmp4_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln49_reg_334_pp0_iter1_reg)
    begin
        if (((icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            B_tmp4_blk_n <= B_tmp4_full_n;
        else 
            B_tmp4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_tmp4_din <= ap_phi_mux_empty_37_phi_fu_203_p4(32 - 1 downto 0);

    B_tmp4_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln49_reg_334_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_tmp4_write <= ap_const_logic_1;
        else 
            B_tmp4_write <= ap_const_logic_0;
        end if; 
    end process;


    C_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, C_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_out_blk_n <= C_out_full_n;
        else 
            C_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_out_din <= C;

    C_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, C_out_full_n, ap_block_state1_io)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = C_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_out_write <= ap_const_logic_1;
        else 
            C_out_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln49_fu_251_p2 <= std_logic_vector(unsigned(c_reg_156) + unsigned(ap_const_lv18_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(70);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state74 <= ap_CS_fsm(71);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_b0_RVALID, m_axi_b1_RVALID, A_tmp3_full_n, B_tmp4_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln49_reg_334_pp0_iter1_reg, ap_predicate_op254_read_state72, ap_predicate_op256_read_state72, ap_predicate_op261_write_state73, ap_predicate_op263_write_state73)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_const_logic_0 = B_tmp4_full_n) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_predicate_op263_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)) or ((ap_predicate_op261_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op256_read_state72 = ap_const_boolean_1) and (m_axi_b1_RVALID = ap_const_logic_0)) or ((ap_predicate_op254_read_state72 = ap_const_boolean_1) and (m_axi_b0_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_b0_RVALID, m_axi_b1_RVALID, A_tmp3_full_n, B_tmp4_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln49_reg_334_pp0_iter1_reg, ap_predicate_op254_read_state72, ap_predicate_op256_read_state72, ap_predicate_op261_write_state73, ap_predicate_op263_write_state73)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_const_logic_0 = B_tmp4_full_n) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_predicate_op263_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)) or ((ap_predicate_op261_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op256_read_state72 = ap_const_boolean_1) and (m_axi_b1_RVALID = ap_const_logic_0)) or ((ap_predicate_op254_read_state72 = ap_const_boolean_1) and (m_axi_b0_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_b0_RVALID, m_axi_b1_RVALID, A_tmp3_full_n, B_tmp4_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln49_reg_334_pp0_iter1_reg, ap_predicate_op254_read_state72, ap_predicate_op256_read_state72, ap_predicate_op261_write_state73, ap_predicate_op263_write_state73)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_const_logic_0 = B_tmp4_full_n) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_predicate_op263_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)) or ((ap_predicate_op261_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op256_read_state72 = ap_const_boolean_1) and (m_axi_b1_RVALID = ap_const_logic_0)) or ((ap_predicate_op254_read_state72 = ap_const_boolean_1) and (m_axi_b0_RVALID = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, C_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = C_out_full_n));
    end process;


    ap_block_state1_io_assign_proc : process(m_axi_b0_ARREADY, m_axi_b1_ARREADY)
    begin
                ap_block_state1_io <= ((m_axi_b1_ARREADY = ap_const_logic_0) or (m_axi_b0_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state71_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_pp0_stage0_iter1_assign_proc : process(m_axi_b0_RVALID, m_axi_b1_RVALID, ap_predicate_op254_read_state72, ap_predicate_op256_read_state72)
    begin
                ap_block_state72_pp0_stage0_iter1 <= (((ap_predicate_op256_read_state72 = ap_const_boolean_1) and (m_axi_b1_RVALID = ap_const_logic_0)) or ((ap_predicate_op254_read_state72 = ap_const_boolean_1) and (m_axi_b0_RVALID = ap_const_logic_0)));
    end process;


    ap_block_state73_pp0_stage0_iter2_assign_proc : process(A_tmp3_full_n, B_tmp4_full_n, icmp_ln49_reg_334_pp0_iter1_reg, ap_predicate_op261_write_state73, ap_predicate_op263_write_state73)
    begin
                ap_block_state73_pp0_stage0_iter2 <= (((ap_const_logic_0 = B_tmp4_full_n) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_predicate_op263_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)) or ((ap_predicate_op261_write_state73 = ap_const_boolean_1) and (ap_const_logic_0 = A_tmp3_full_n)));
    end process;


    ap_condition_pp0_exit_iter1_state72_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state72 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state72 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln49_fu_257_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln49_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_cur_n <= (b1_blk_n_R and b1_blk_n_AR and b0_blk_n_R and b0_blk_n_AR);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (C_out_blk_n and B_tmp4_blk_n and A_tmp3_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_cur_n and ap_const_logic_1);

    ap_phi_mux_empty_37_phi_fu_203_p4_assign_proc : process(icmp_ln49_reg_334_pp0_iter1_reg, icmp_ln174_reg_338_pp0_iter1_reg, b1_addr_read_reg_352, ap_phi_reg_pp0_iter2_empty_37_reg_200, shiftreg2_cast_i_i_fu_277_p1)
    begin
        if ((icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_37_phi_fu_203_p4 <= shiftreg2_cast_i_i_fu_277_p1;
            elsif ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_37_phi_fu_203_p4 <= b1_addr_read_reg_352;
            else 
                ap_phi_mux_empty_37_phi_fu_203_p4 <= ap_phi_reg_pp0_iter2_empty_37_reg_200;
            end if;
        else 
            ap_phi_mux_empty_37_phi_fu_203_p4 <= ap_phi_reg_pp0_iter2_empty_37_reg_200;
        end if; 
    end process;


    ap_phi_mux_p_in_i_i_phi_fu_194_p4_assign_proc : process(icmp_ln49_reg_334_pp0_iter1_reg, icmp_ln174_reg_338_pp0_iter1_reg, b0_addr_read_reg_342, ap_phi_reg_pp0_iter2_p_in_i_i_reg_191, shiftreg_cast_i_i_fu_282_p1)
    begin
        if ((icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_p_in_i_i_phi_fu_194_p4 <= shiftreg_cast_i_i_fu_282_p1;
            elsif ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_p_in_i_i_phi_fu_194_p4 <= b0_addr_read_reg_342;
            else 
                ap_phi_mux_p_in_i_i_phi_fu_194_p4 <= ap_phi_reg_pp0_iter2_p_in_i_i_reg_191;
            end if;
        else 
            ap_phi_mux_p_in_i_i_phi_fu_194_p4 <= ap_phi_reg_pp0_iter2_p_in_i_i_reg_191;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_37_reg_200 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter2_p_in_i_i_reg_191 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op254_read_state72_assign_proc : process(icmp_ln49_reg_334, icmp_ln174_reg_338)
    begin
                ap_predicate_op254_read_state72 <= ((icmp_ln174_reg_338 = ap_const_lv1_1) and (icmp_ln49_reg_334 = ap_const_lv1_0));
    end process;


    ap_predicate_op256_read_state72_assign_proc : process(icmp_ln49_reg_334, icmp_ln174_reg_338)
    begin
                ap_predicate_op256_read_state72 <= ((icmp_ln174_reg_338 = ap_const_lv1_1) and (icmp_ln49_reg_334 = ap_const_lv1_0));
    end process;


    ap_predicate_op261_write_state73_assign_proc : process(icmp_ln49_reg_334_pp0_iter1_reg, icmp_ln174_reg_338_pp0_iter1_reg)
    begin
                ap_predicate_op261_write_state73 <= ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op263_write_state73_assign_proc : process(icmp_ln49_reg_334_pp0_iter1_reg, icmp_ln174_reg_338_pp0_iter1_reg)
    begin
                ap_predicate_op263_write_state73 <= ((icmp_ln174_reg_338_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln49_reg_334_pp0_iter1_reg = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    ap_str_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    b0_blk_n_AR_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, m_axi_b0_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b0_blk_n_AR <= m_axi_b0_ARREADY;
        else 
            b0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    b0_blk_n_R_assign_proc : process(m_axi_b0_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln49_reg_334, icmp_ln174_reg_338)
    begin
        if (((icmp_ln174_reg_338 = ap_const_lv1_1) and (icmp_ln49_reg_334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b0_blk_n_R <= m_axi_b0_RVALID;
        else 
            b0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    b1_blk_n_AR_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, m_axi_b1_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b1_blk_n_AR <= m_axi_b1_ARREADY;
        else 
            b1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    b1_blk_n_R_assign_proc : process(m_axi_b1_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln49_reg_334, icmp_ln174_reg_338)
    begin
        if (((icmp_ln174_reg_338 = ap_const_lv1_1) and (icmp_ln49_reg_334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b1_blk_n_R <= m_axi_b1_RVALID;
        else 
            b1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    empty_36_fu_263_p1 <= c_reg_156(4 - 1 downto 0);
    icmp_ln174_fu_267_p2 <= "1" when (empty_36_fu_263_p1 = ap_const_lv4_0) else "0";
    icmp_ln49_fu_257_p2 <= "1" when (c_reg_156 = ap_const_lv18_20800) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_b0_ARADDR <= sext_ln49_fu_219_p1;
    m_axi_b0_ARBURST <= ap_const_lv2_0;
    m_axi_b0_ARCACHE <= ap_const_lv4_0;
    m_axi_b0_ARID <= ap_const_lv1_0;
    m_axi_b0_ARLEN <= ap_const_lv32_2080;
    m_axi_b0_ARLOCK <= ap_const_lv2_0;
    m_axi_b0_ARPROT <= ap_const_lv3_0;
    m_axi_b0_ARQOS <= ap_const_lv4_0;
    m_axi_b0_ARREGION <= ap_const_lv4_0;
    m_axi_b0_ARSIZE <= ap_const_lv3_0;
    m_axi_b0_ARUSER <= ap_const_lv1_0;

    m_axi_b0_ARVALID_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, C_out_full_n, ap_block_state1_io)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = C_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_b0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_b0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_b0_AWADDR <= ap_const_lv64_0;
    m_axi_b0_AWBURST <= ap_const_lv2_0;
    m_axi_b0_AWCACHE <= ap_const_lv4_0;
    m_axi_b0_AWID <= ap_const_lv1_0;
    m_axi_b0_AWLEN <= ap_const_lv32_0;
    m_axi_b0_AWLOCK <= ap_const_lv2_0;
    m_axi_b0_AWPROT <= ap_const_lv3_0;
    m_axi_b0_AWQOS <= ap_const_lv4_0;
    m_axi_b0_AWREGION <= ap_const_lv4_0;
    m_axi_b0_AWSIZE <= ap_const_lv3_0;
    m_axi_b0_AWUSER <= ap_const_lv1_0;
    m_axi_b0_AWVALID <= ap_const_logic_0;
    m_axi_b0_BREADY <= ap_const_logic_0;

    m_axi_b0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op254_read_state72, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op254_read_state72 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_b0_RREADY <= ap_const_logic_1;
        else 
            m_axi_b0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_b0_WDATA <= ap_const_lv512_lc_1;
    m_axi_b0_WID <= ap_const_lv1_0;
    m_axi_b0_WLAST <= ap_const_logic_0;
    m_axi_b0_WSTRB <= ap_const_lv64_0;
    m_axi_b0_WUSER <= ap_const_lv1_0;
    m_axi_b0_WVALID <= ap_const_logic_0;
    m_axi_b1_ARADDR <= sext_ln49_1_fu_240_p1;
    m_axi_b1_ARBURST <= ap_const_lv2_0;
    m_axi_b1_ARCACHE <= ap_const_lv4_0;
    m_axi_b1_ARID <= ap_const_lv1_0;
    m_axi_b1_ARLEN <= ap_const_lv32_2080;
    m_axi_b1_ARLOCK <= ap_const_lv2_0;
    m_axi_b1_ARPROT <= ap_const_lv3_0;
    m_axi_b1_ARQOS <= ap_const_lv4_0;
    m_axi_b1_ARREGION <= ap_const_lv4_0;
    m_axi_b1_ARSIZE <= ap_const_lv3_0;
    m_axi_b1_ARUSER <= ap_const_lv1_0;

    m_axi_b1_ARVALID_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, C_out_full_n, ap_block_state1_io)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = C_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_b1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_b1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_b1_AWADDR <= ap_const_lv64_0;
    m_axi_b1_AWBURST <= ap_const_lv2_0;
    m_axi_b1_AWCACHE <= ap_const_lv4_0;
    m_axi_b1_AWID <= ap_const_lv1_0;
    m_axi_b1_AWLEN <= ap_const_lv32_0;
    m_axi_b1_AWLOCK <= ap_const_lv2_0;
    m_axi_b1_AWPROT <= ap_const_lv3_0;
    m_axi_b1_AWQOS <= ap_const_lv4_0;
    m_axi_b1_AWREGION <= ap_const_lv4_0;
    m_axi_b1_AWSIZE <= ap_const_lv3_0;
    m_axi_b1_AWUSER <= ap_const_lv1_0;
    m_axi_b1_AWVALID <= ap_const_logic_0;
    m_axi_b1_BREADY <= ap_const_logic_0;

    m_axi_b1_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op256_read_state72, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op256_read_state72 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_b1_RREADY <= ap_const_logic_1;
        else 
            m_axi_b1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_b1_WDATA <= ap_const_lv512_lc_1;
    m_axi_b1_WID <= ap_const_lv1_0;
    m_axi_b1_WLAST <= ap_const_logic_0;
    m_axi_b1_WSTRB <= ap_const_lv64_0;
    m_axi_b1_WUSER <= ap_const_lv1_0;
    m_axi_b1_WVALID <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln49_1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln49_1_fu_230_p4),64));

        sext_ln49_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_209_p4),64));

    shiftreg2_cast_i_i_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftreg2_i_i_reg_179),512));
    shiftreg_cast_i_i_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftreg_i_i_reg_167),512));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln174_1_fu_287_p1 <= shiftreg_i_i_reg_167(32 - 1 downto 0);
    trunc_ln174_fu_273_p1 <= m_axi_b0_RDATA(32 - 1 downto 0);
    trunc_ln49_1_fu_230_p4 <= B(63 downto 6);
    trunc_ln_fu_209_p4 <= A(63 downto 6);
end behav;
