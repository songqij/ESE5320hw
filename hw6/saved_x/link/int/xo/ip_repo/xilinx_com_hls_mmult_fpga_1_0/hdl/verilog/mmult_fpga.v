// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_fpga_mmult_fpga,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=300891,HLS_SYN_TPT=300822,HLS_SYN_MEM=154,HLS_SYN_DSP=0,HLS_SYN_FF=26380,HLS_SYN_LUT=20762,HLS_VERSION=2020_2}" *)

module mmult_fpga (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        event_done,
        interrupt,
        event_start,
        m_axi_b0_AWVALID,
        m_axi_b0_AWREADY,
        m_axi_b0_AWADDR,
        m_axi_b0_AWID,
        m_axi_b0_AWLEN,
        m_axi_b0_AWSIZE,
        m_axi_b0_AWBURST,
        m_axi_b0_AWLOCK,
        m_axi_b0_AWCACHE,
        m_axi_b0_AWPROT,
        m_axi_b0_AWQOS,
        m_axi_b0_AWREGION,
        m_axi_b0_AWUSER,
        m_axi_b0_WVALID,
        m_axi_b0_WREADY,
        m_axi_b0_WDATA,
        m_axi_b0_WSTRB,
        m_axi_b0_WLAST,
        m_axi_b0_WID,
        m_axi_b0_WUSER,
        m_axi_b0_ARVALID,
        m_axi_b0_ARREADY,
        m_axi_b0_ARADDR,
        m_axi_b0_ARID,
        m_axi_b0_ARLEN,
        m_axi_b0_ARSIZE,
        m_axi_b0_ARBURST,
        m_axi_b0_ARLOCK,
        m_axi_b0_ARCACHE,
        m_axi_b0_ARPROT,
        m_axi_b0_ARQOS,
        m_axi_b0_ARREGION,
        m_axi_b0_ARUSER,
        m_axi_b0_RVALID,
        m_axi_b0_RREADY,
        m_axi_b0_RDATA,
        m_axi_b0_RLAST,
        m_axi_b0_RID,
        m_axi_b0_RUSER,
        m_axi_b0_RRESP,
        m_axi_b0_BVALID,
        m_axi_b0_BREADY,
        m_axi_b0_BRESP,
        m_axi_b0_BID,
        m_axi_b0_BUSER,
        m_axi_b1_AWVALID,
        m_axi_b1_AWREADY,
        m_axi_b1_AWADDR,
        m_axi_b1_AWID,
        m_axi_b1_AWLEN,
        m_axi_b1_AWSIZE,
        m_axi_b1_AWBURST,
        m_axi_b1_AWLOCK,
        m_axi_b1_AWCACHE,
        m_axi_b1_AWPROT,
        m_axi_b1_AWQOS,
        m_axi_b1_AWREGION,
        m_axi_b1_AWUSER,
        m_axi_b1_WVALID,
        m_axi_b1_WREADY,
        m_axi_b1_WDATA,
        m_axi_b1_WSTRB,
        m_axi_b1_WLAST,
        m_axi_b1_WID,
        m_axi_b1_WUSER,
        m_axi_b1_ARVALID,
        m_axi_b1_ARREADY,
        m_axi_b1_ARADDR,
        m_axi_b1_ARID,
        m_axi_b1_ARLEN,
        m_axi_b1_ARSIZE,
        m_axi_b1_ARBURST,
        m_axi_b1_ARLOCK,
        m_axi_b1_ARCACHE,
        m_axi_b1_ARPROT,
        m_axi_b1_ARQOS,
        m_axi_b1_ARREGION,
        m_axi_b1_ARUSER,
        m_axi_b1_RVALID,
        m_axi_b1_RREADY,
        m_axi_b1_RDATA,
        m_axi_b1_RLAST,
        m_axi_b1_RID,
        m_axi_b1_RUSER,
        m_axi_b1_RRESP,
        m_axi_b1_BVALID,
        m_axi_b1_BREADY,
        m_axi_b1_BRESP,
        m_axi_b1_BID,
        m_axi_b1_BUSER,
        m_axi_b2_AWVALID,
        m_axi_b2_AWREADY,
        m_axi_b2_AWADDR,
        m_axi_b2_AWID,
        m_axi_b2_AWLEN,
        m_axi_b2_AWSIZE,
        m_axi_b2_AWBURST,
        m_axi_b2_AWLOCK,
        m_axi_b2_AWCACHE,
        m_axi_b2_AWPROT,
        m_axi_b2_AWQOS,
        m_axi_b2_AWREGION,
        m_axi_b2_AWUSER,
        m_axi_b2_WVALID,
        m_axi_b2_WREADY,
        m_axi_b2_WDATA,
        m_axi_b2_WSTRB,
        m_axi_b2_WLAST,
        m_axi_b2_WID,
        m_axi_b2_WUSER,
        m_axi_b2_ARVALID,
        m_axi_b2_ARREADY,
        m_axi_b2_ARADDR,
        m_axi_b2_ARID,
        m_axi_b2_ARLEN,
        m_axi_b2_ARSIZE,
        m_axi_b2_ARBURST,
        m_axi_b2_ARLOCK,
        m_axi_b2_ARCACHE,
        m_axi_b2_ARPROT,
        m_axi_b2_ARQOS,
        m_axi_b2_ARREGION,
        m_axi_b2_ARUSER,
        m_axi_b2_RVALID,
        m_axi_b2_RREADY,
        m_axi_b2_RDATA,
        m_axi_b2_RLAST,
        m_axi_b2_RID,
        m_axi_b2_RUSER,
        m_axi_b2_RRESP,
        m_axi_b2_BVALID,
        m_axi_b2_BREADY,
        m_axi_b2_BRESP,
        m_axi_b2_BID,
        m_axi_b2_BUSER,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_B0_ID_WIDTH = 1;
parameter    C_M_AXI_B0_ADDR_WIDTH = 64;
parameter    C_M_AXI_B0_DATA_WIDTH = 512;
parameter    C_M_AXI_B0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B0_WUSER_WIDTH = 1;
parameter    C_M_AXI_B0_RUSER_WIDTH = 1;
parameter    C_M_AXI_B0_BUSER_WIDTH = 1;
parameter    C_M_AXI_B0_USER_VALUE = 0;
parameter    C_M_AXI_B0_PROT_VALUE = 0;
parameter    C_M_AXI_B0_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_B1_ID_WIDTH = 1;
parameter    C_M_AXI_B1_ADDR_WIDTH = 64;
parameter    C_M_AXI_B1_DATA_WIDTH = 512;
parameter    C_M_AXI_B1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B1_WUSER_WIDTH = 1;
parameter    C_M_AXI_B1_RUSER_WIDTH = 1;
parameter    C_M_AXI_B1_BUSER_WIDTH = 1;
parameter    C_M_AXI_B1_USER_VALUE = 0;
parameter    C_M_AXI_B1_PROT_VALUE = 0;
parameter    C_M_AXI_B1_CACHE_VALUE = 3;
parameter    C_M_AXI_B2_ID_WIDTH = 1;
parameter    C_M_AXI_B2_ADDR_WIDTH = 64;
parameter    C_M_AXI_B2_DATA_WIDTH = 512;
parameter    C_M_AXI_B2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B2_WUSER_WIDTH = 1;
parameter    C_M_AXI_B2_RUSER_WIDTH = 1;
parameter    C_M_AXI_B2_BUSER_WIDTH = 1;
parameter    C_M_AXI_B2_USER_VALUE = 0;
parameter    C_M_AXI_B2_PROT_VALUE = 0;
parameter    C_M_AXI_B2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B0_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B1_WSTRB_WIDTH = (512 / 8);
parameter C_M_AXI_B2_WSTRB_WIDTH = (512 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   event_done;
output   interrupt;
output   event_start;
output   m_axi_b0_AWVALID;
input   m_axi_b0_AWREADY;
output  [C_M_AXI_B0_ADDR_WIDTH - 1:0] m_axi_b0_AWADDR;
output  [C_M_AXI_B0_ID_WIDTH - 1:0] m_axi_b0_AWID;
output  [7:0] m_axi_b0_AWLEN;
output  [2:0] m_axi_b0_AWSIZE;
output  [1:0] m_axi_b0_AWBURST;
output  [1:0] m_axi_b0_AWLOCK;
output  [3:0] m_axi_b0_AWCACHE;
output  [2:0] m_axi_b0_AWPROT;
output  [3:0] m_axi_b0_AWQOS;
output  [3:0] m_axi_b0_AWREGION;
output  [C_M_AXI_B0_AWUSER_WIDTH - 1:0] m_axi_b0_AWUSER;
output   m_axi_b0_WVALID;
input   m_axi_b0_WREADY;
output  [C_M_AXI_B0_DATA_WIDTH - 1:0] m_axi_b0_WDATA;
output  [C_M_AXI_B0_WSTRB_WIDTH - 1:0] m_axi_b0_WSTRB;
output   m_axi_b0_WLAST;
output  [C_M_AXI_B0_ID_WIDTH - 1:0] m_axi_b0_WID;
output  [C_M_AXI_B0_WUSER_WIDTH - 1:0] m_axi_b0_WUSER;
output   m_axi_b0_ARVALID;
input   m_axi_b0_ARREADY;
output  [C_M_AXI_B0_ADDR_WIDTH - 1:0] m_axi_b0_ARADDR;
output  [C_M_AXI_B0_ID_WIDTH - 1:0] m_axi_b0_ARID;
output  [7:0] m_axi_b0_ARLEN;
output  [2:0] m_axi_b0_ARSIZE;
output  [1:0] m_axi_b0_ARBURST;
output  [1:0] m_axi_b0_ARLOCK;
output  [3:0] m_axi_b0_ARCACHE;
output  [2:0] m_axi_b0_ARPROT;
output  [3:0] m_axi_b0_ARQOS;
output  [3:0] m_axi_b0_ARREGION;
output  [C_M_AXI_B0_ARUSER_WIDTH - 1:0] m_axi_b0_ARUSER;
input   m_axi_b0_RVALID;
output   m_axi_b0_RREADY;
input  [C_M_AXI_B0_DATA_WIDTH - 1:0] m_axi_b0_RDATA;
input   m_axi_b0_RLAST;
input  [C_M_AXI_B0_ID_WIDTH - 1:0] m_axi_b0_RID;
input  [C_M_AXI_B0_RUSER_WIDTH - 1:0] m_axi_b0_RUSER;
input  [1:0] m_axi_b0_RRESP;
input   m_axi_b0_BVALID;
output   m_axi_b0_BREADY;
input  [1:0] m_axi_b0_BRESP;
input  [C_M_AXI_B0_ID_WIDTH - 1:0] m_axi_b0_BID;
input  [C_M_AXI_B0_BUSER_WIDTH - 1:0] m_axi_b0_BUSER;
output   m_axi_b1_AWVALID;
input   m_axi_b1_AWREADY;
output  [C_M_AXI_B1_ADDR_WIDTH - 1:0] m_axi_b1_AWADDR;
output  [C_M_AXI_B1_ID_WIDTH - 1:0] m_axi_b1_AWID;
output  [7:0] m_axi_b1_AWLEN;
output  [2:0] m_axi_b1_AWSIZE;
output  [1:0] m_axi_b1_AWBURST;
output  [1:0] m_axi_b1_AWLOCK;
output  [3:0] m_axi_b1_AWCACHE;
output  [2:0] m_axi_b1_AWPROT;
output  [3:0] m_axi_b1_AWQOS;
output  [3:0] m_axi_b1_AWREGION;
output  [C_M_AXI_B1_AWUSER_WIDTH - 1:0] m_axi_b1_AWUSER;
output   m_axi_b1_WVALID;
input   m_axi_b1_WREADY;
output  [C_M_AXI_B1_DATA_WIDTH - 1:0] m_axi_b1_WDATA;
output  [C_M_AXI_B1_WSTRB_WIDTH - 1:0] m_axi_b1_WSTRB;
output   m_axi_b1_WLAST;
output  [C_M_AXI_B1_ID_WIDTH - 1:0] m_axi_b1_WID;
output  [C_M_AXI_B1_WUSER_WIDTH - 1:0] m_axi_b1_WUSER;
output   m_axi_b1_ARVALID;
input   m_axi_b1_ARREADY;
output  [C_M_AXI_B1_ADDR_WIDTH - 1:0] m_axi_b1_ARADDR;
output  [C_M_AXI_B1_ID_WIDTH - 1:0] m_axi_b1_ARID;
output  [7:0] m_axi_b1_ARLEN;
output  [2:0] m_axi_b1_ARSIZE;
output  [1:0] m_axi_b1_ARBURST;
output  [1:0] m_axi_b1_ARLOCK;
output  [3:0] m_axi_b1_ARCACHE;
output  [2:0] m_axi_b1_ARPROT;
output  [3:0] m_axi_b1_ARQOS;
output  [3:0] m_axi_b1_ARREGION;
output  [C_M_AXI_B1_ARUSER_WIDTH - 1:0] m_axi_b1_ARUSER;
input   m_axi_b1_RVALID;
output   m_axi_b1_RREADY;
input  [C_M_AXI_B1_DATA_WIDTH - 1:0] m_axi_b1_RDATA;
input   m_axi_b1_RLAST;
input  [C_M_AXI_B1_ID_WIDTH - 1:0] m_axi_b1_RID;
input  [C_M_AXI_B1_RUSER_WIDTH - 1:0] m_axi_b1_RUSER;
input  [1:0] m_axi_b1_RRESP;
input   m_axi_b1_BVALID;
output   m_axi_b1_BREADY;
input  [1:0] m_axi_b1_BRESP;
input  [C_M_AXI_B1_ID_WIDTH - 1:0] m_axi_b1_BID;
input  [C_M_AXI_B1_BUSER_WIDTH - 1:0] m_axi_b1_BUSER;
output   m_axi_b2_AWVALID;
input   m_axi_b2_AWREADY;
output  [C_M_AXI_B2_ADDR_WIDTH - 1:0] m_axi_b2_AWADDR;
output  [C_M_AXI_B2_ID_WIDTH - 1:0] m_axi_b2_AWID;
output  [7:0] m_axi_b2_AWLEN;
output  [2:0] m_axi_b2_AWSIZE;
output  [1:0] m_axi_b2_AWBURST;
output  [1:0] m_axi_b2_AWLOCK;
output  [3:0] m_axi_b2_AWCACHE;
output  [2:0] m_axi_b2_AWPROT;
output  [3:0] m_axi_b2_AWQOS;
output  [3:0] m_axi_b2_AWREGION;
output  [C_M_AXI_B2_AWUSER_WIDTH - 1:0] m_axi_b2_AWUSER;
output   m_axi_b2_WVALID;
input   m_axi_b2_WREADY;
output  [C_M_AXI_B2_DATA_WIDTH - 1:0] m_axi_b2_WDATA;
output  [C_M_AXI_B2_WSTRB_WIDTH - 1:0] m_axi_b2_WSTRB;
output   m_axi_b2_WLAST;
output  [C_M_AXI_B2_ID_WIDTH - 1:0] m_axi_b2_WID;
output  [C_M_AXI_B2_WUSER_WIDTH - 1:0] m_axi_b2_WUSER;
output   m_axi_b2_ARVALID;
input   m_axi_b2_ARREADY;
output  [C_M_AXI_B2_ADDR_WIDTH - 1:0] m_axi_b2_ARADDR;
output  [C_M_AXI_B2_ID_WIDTH - 1:0] m_axi_b2_ARID;
output  [7:0] m_axi_b2_ARLEN;
output  [2:0] m_axi_b2_ARSIZE;
output  [1:0] m_axi_b2_ARBURST;
output  [1:0] m_axi_b2_ARLOCK;
output  [3:0] m_axi_b2_ARCACHE;
output  [2:0] m_axi_b2_ARPROT;
output  [3:0] m_axi_b2_ARQOS;
output  [3:0] m_axi_b2_ARREGION;
output  [C_M_AXI_B2_ARUSER_WIDTH - 1:0] m_axi_b2_ARUSER;
input   m_axi_b2_RVALID;
output   m_axi_b2_RREADY;
input  [C_M_AXI_B2_DATA_WIDTH - 1:0] m_axi_b2_RDATA;
input   m_axi_b2_RLAST;
input  [C_M_AXI_B2_ID_WIDTH - 1:0] m_axi_b2_RID;
input  [C_M_AXI_B2_RUSER_WIDTH - 1:0] m_axi_b2_RUSER;
input  [1:0] m_axi_b2_RRESP;
input   m_axi_b2_BVALID;
output   m_axi_b2_BREADY;
input  [1:0] m_axi_b2_BRESP;
input  [C_M_AXI_B2_ID_WIDTH - 1:0] m_axi_b2_BID;
input  [C_M_AXI_B2_BUSER_WIDTH - 1:0] m_axi_b2_BUSER;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] C;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_continue;
wire    ap_idle;
wire    b0_AWREADY;
wire    b0_WREADY;
wire    b0_ARREADY;
wire    b0_RVALID;
wire   [511:0] b0_RDATA;
wire    b0_RLAST;
wire   [0:0] b0_RID;
wire   [0:0] b0_RUSER;
wire   [1:0] b0_RRESP;
wire    b0_BVALID;
wire   [1:0] b0_BRESP;
wire   [0:0] b0_BID;
wire   [0:0] b0_BUSER;
wire    b1_AWREADY;
wire    b1_WREADY;
wire    b1_ARREADY;
wire    b1_RVALID;
wire   [511:0] b1_RDATA;
wire    b1_RLAST;
wire   [0:0] b1_RID;
wire   [0:0] b1_RUSER;
wire   [1:0] b1_RRESP;
wire    b1_BVALID;
wire   [1:0] b1_BRESP;
wire   [0:0] b1_BID;
wire   [0:0] b1_BUSER;
wire    b2_AWREADY;
wire    b2_WREADY;
wire    b2_ARREADY;
wire    b2_RVALID;
wire   [511:0] b2_RDATA;
wire    b2_RLAST;
wire   [0:0] b2_RID;
wire   [0:0] b2_RUSER;
wire   [1:0] b2_RRESP;
wire    b2_BVALID;
wire   [1:0] b2_BRESP;
wire   [0:0] b2_BID;
wire   [0:0] b2_BUSER;
wire    read3_U0_ap_start;
wire    read3_U0_start_full_n;
wire    read3_U0_ap_done;
wire    read3_U0_ap_continue;
wire    read3_U0_ap_idle;
wire    read3_U0_ap_ready;
wire    read3_U0_start_out;
wire    read3_U0_start_write;
wire    read3_U0_m_axi_b0_AWVALID;
wire   [63:0] read3_U0_m_axi_b0_AWADDR;
wire   [0:0] read3_U0_m_axi_b0_AWID;
wire   [31:0] read3_U0_m_axi_b0_AWLEN;
wire   [2:0] read3_U0_m_axi_b0_AWSIZE;
wire   [1:0] read3_U0_m_axi_b0_AWBURST;
wire   [1:0] read3_U0_m_axi_b0_AWLOCK;
wire   [3:0] read3_U0_m_axi_b0_AWCACHE;
wire   [2:0] read3_U0_m_axi_b0_AWPROT;
wire   [3:0] read3_U0_m_axi_b0_AWQOS;
wire   [3:0] read3_U0_m_axi_b0_AWREGION;
wire   [0:0] read3_U0_m_axi_b0_AWUSER;
wire    read3_U0_m_axi_b0_WVALID;
wire   [511:0] read3_U0_m_axi_b0_WDATA;
wire   [63:0] read3_U0_m_axi_b0_WSTRB;
wire    read3_U0_m_axi_b0_WLAST;
wire   [0:0] read3_U0_m_axi_b0_WID;
wire   [0:0] read3_U0_m_axi_b0_WUSER;
wire    read3_U0_m_axi_b0_ARVALID;
wire   [63:0] read3_U0_m_axi_b0_ARADDR;
wire   [0:0] read3_U0_m_axi_b0_ARID;
wire   [31:0] read3_U0_m_axi_b0_ARLEN;
wire   [2:0] read3_U0_m_axi_b0_ARSIZE;
wire   [1:0] read3_U0_m_axi_b0_ARBURST;
wire   [1:0] read3_U0_m_axi_b0_ARLOCK;
wire   [3:0] read3_U0_m_axi_b0_ARCACHE;
wire   [2:0] read3_U0_m_axi_b0_ARPROT;
wire   [3:0] read3_U0_m_axi_b0_ARQOS;
wire   [3:0] read3_U0_m_axi_b0_ARREGION;
wire   [0:0] read3_U0_m_axi_b0_ARUSER;
wire    read3_U0_m_axi_b0_RREADY;
wire    read3_U0_m_axi_b0_BREADY;
wire    read3_U0_m_axi_b1_AWVALID;
wire   [63:0] read3_U0_m_axi_b1_AWADDR;
wire   [0:0] read3_U0_m_axi_b1_AWID;
wire   [31:0] read3_U0_m_axi_b1_AWLEN;
wire   [2:0] read3_U0_m_axi_b1_AWSIZE;
wire   [1:0] read3_U0_m_axi_b1_AWBURST;
wire   [1:0] read3_U0_m_axi_b1_AWLOCK;
wire   [3:0] read3_U0_m_axi_b1_AWCACHE;
wire   [2:0] read3_U0_m_axi_b1_AWPROT;
wire   [3:0] read3_U0_m_axi_b1_AWQOS;
wire   [3:0] read3_U0_m_axi_b1_AWREGION;
wire   [0:0] read3_U0_m_axi_b1_AWUSER;
wire    read3_U0_m_axi_b1_WVALID;
wire   [511:0] read3_U0_m_axi_b1_WDATA;
wire   [63:0] read3_U0_m_axi_b1_WSTRB;
wire    read3_U0_m_axi_b1_WLAST;
wire   [0:0] read3_U0_m_axi_b1_WID;
wire   [0:0] read3_U0_m_axi_b1_WUSER;
wire    read3_U0_m_axi_b1_ARVALID;
wire   [63:0] read3_U0_m_axi_b1_ARADDR;
wire   [0:0] read3_U0_m_axi_b1_ARID;
wire   [31:0] read3_U0_m_axi_b1_ARLEN;
wire   [2:0] read3_U0_m_axi_b1_ARSIZE;
wire   [1:0] read3_U0_m_axi_b1_ARBURST;
wire   [1:0] read3_U0_m_axi_b1_ARLOCK;
wire   [3:0] read3_U0_m_axi_b1_ARCACHE;
wire   [2:0] read3_U0_m_axi_b1_ARPROT;
wire   [3:0] read3_U0_m_axi_b1_ARQOS;
wire   [3:0] read3_U0_m_axi_b1_ARREGION;
wire   [0:0] read3_U0_m_axi_b1_ARUSER;
wire    read3_U0_m_axi_b1_RREADY;
wire    read3_U0_m_axi_b1_BREADY;
wire   [31:0] read3_U0_A_tmp3_din;
wire    read3_U0_A_tmp3_write;
wire   [31:0] read3_U0_B_tmp4_din;
wire    read3_U0_B_tmp4_write;
wire   [63:0] read3_U0_C_out_din;
wire    read3_U0_C_out_write;
wire    read3_U0_ap_ext_blocking_n;
wire    read3_U0_ap_str_blocking_n;
wire    read3_U0_ap_int_blocking_n;
wire    execution_U0_ap_start;
wire    execution_U0_ap_done;
wire    execution_U0_ap_continue;
wire    execution_U0_ap_idle;
wire    execution_U0_ap_ready;
wire    execution_U0_A_tmp_read;
wire    execution_U0_B_tmp_read;
wire   [31:0] execution_U0_result_din;
wire    execution_U0_result_write;
wire    execution_U0_ap_ext_blocking_n;
wire    execution_U0_ap_str_blocking_n;
wire    execution_U0_ap_int_blocking_n;
wire    write_U0_ap_start;
wire    write_U0_ap_done;
wire    write_U0_ap_continue;
wire    write_U0_ap_idle;
wire    write_U0_ap_ready;
wire    write_U0_result5_read;
wire    write_U0_m_axi_b2_AWVALID;
wire   [63:0] write_U0_m_axi_b2_AWADDR;
wire   [0:0] write_U0_m_axi_b2_AWID;
wire   [31:0] write_U0_m_axi_b2_AWLEN;
wire   [2:0] write_U0_m_axi_b2_AWSIZE;
wire   [1:0] write_U0_m_axi_b2_AWBURST;
wire   [1:0] write_U0_m_axi_b2_AWLOCK;
wire   [3:0] write_U0_m_axi_b2_AWCACHE;
wire   [2:0] write_U0_m_axi_b2_AWPROT;
wire   [3:0] write_U0_m_axi_b2_AWQOS;
wire   [3:0] write_U0_m_axi_b2_AWREGION;
wire   [0:0] write_U0_m_axi_b2_AWUSER;
wire    write_U0_m_axi_b2_WVALID;
wire   [511:0] write_U0_m_axi_b2_WDATA;
wire   [63:0] write_U0_m_axi_b2_WSTRB;
wire    write_U0_m_axi_b2_WLAST;
wire   [0:0] write_U0_m_axi_b2_WID;
wire   [0:0] write_U0_m_axi_b2_WUSER;
wire    write_U0_m_axi_b2_ARVALID;
wire   [63:0] write_U0_m_axi_b2_ARADDR;
wire   [0:0] write_U0_m_axi_b2_ARID;
wire   [31:0] write_U0_m_axi_b2_ARLEN;
wire   [2:0] write_U0_m_axi_b2_ARSIZE;
wire   [1:0] write_U0_m_axi_b2_ARBURST;
wire   [1:0] write_U0_m_axi_b2_ARLOCK;
wire   [3:0] write_U0_m_axi_b2_ARCACHE;
wire   [2:0] write_U0_m_axi_b2_ARPROT;
wire   [3:0] write_U0_m_axi_b2_ARQOS;
wire   [3:0] write_U0_m_axi_b2_ARREGION;
wire   [0:0] write_U0_m_axi_b2_ARUSER;
wire    write_U0_m_axi_b2_RREADY;
wire    write_U0_m_axi_b2_BREADY;
wire    write_U0_output_r_read;
wire    write_U0_ap_ext_blocking_n;
wire    write_U0_ap_str_blocking_n;
wire    write_U0_ap_int_blocking_n;
wire    ap_sync_continue;
wire    A_tmp_full_n;
wire   [31:0] A_tmp_dout;
wire    A_tmp_empty_n;
wire    B_tmp_full_n;
wire   [31:0] B_tmp_dout;
wire    B_tmp_empty_n;
wire    C_c_full_n;
wire   [63:0] C_c_dout;
wire    C_c_empty_n;
wire    result_full_n;
wire   [31:0] result_dout;
wire    result_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_execution_U0_din;
wire    start_for_execution_U0_full_n;
wire   [0:0] start_for_execution_U0_dout;
wire    start_for_execution_U0_empty_n;
wire   [0:0] start_for_write_U0_din;
wire    start_for_write_U0_full_n;
wire   [0:0] start_for_write_U0_dout;
wire    start_for_write_U0_empty_n;
wire    execution_U0_start_full_n;
wire    execution_U0_start_write;
wire    write_U0_start_full_n;
wire    write_U0_start_write;
wire    ap_ext_blocking_cur_n;
wire    ap_str_blocking_cur_n;
wire    ap_int_blocking_cur_n;
wire    ap_ext_blocking_sub_n;
wire    ap_str_blocking_sub_n;
wire    ap_int_blocking_sub_n;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
end

mmult_fpga_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .C(C),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

mmult_fpga_b0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B0_CACHE_VALUE ))
b0_m_axi_U(
    .AWVALID(m_axi_b0_AWVALID),
    .AWREADY(m_axi_b0_AWREADY),
    .AWADDR(m_axi_b0_AWADDR),
    .AWID(m_axi_b0_AWID),
    .AWLEN(m_axi_b0_AWLEN),
    .AWSIZE(m_axi_b0_AWSIZE),
    .AWBURST(m_axi_b0_AWBURST),
    .AWLOCK(m_axi_b0_AWLOCK),
    .AWCACHE(m_axi_b0_AWCACHE),
    .AWPROT(m_axi_b0_AWPROT),
    .AWQOS(m_axi_b0_AWQOS),
    .AWREGION(m_axi_b0_AWREGION),
    .AWUSER(m_axi_b0_AWUSER),
    .WVALID(m_axi_b0_WVALID),
    .WREADY(m_axi_b0_WREADY),
    .WDATA(m_axi_b0_WDATA),
    .WSTRB(m_axi_b0_WSTRB),
    .WLAST(m_axi_b0_WLAST),
    .WID(m_axi_b0_WID),
    .WUSER(m_axi_b0_WUSER),
    .ARVALID(m_axi_b0_ARVALID),
    .ARREADY(m_axi_b0_ARREADY),
    .ARADDR(m_axi_b0_ARADDR),
    .ARID(m_axi_b0_ARID),
    .ARLEN(m_axi_b0_ARLEN),
    .ARSIZE(m_axi_b0_ARSIZE),
    .ARBURST(m_axi_b0_ARBURST),
    .ARLOCK(m_axi_b0_ARLOCK),
    .ARCACHE(m_axi_b0_ARCACHE),
    .ARPROT(m_axi_b0_ARPROT),
    .ARQOS(m_axi_b0_ARQOS),
    .ARREGION(m_axi_b0_ARREGION),
    .ARUSER(m_axi_b0_ARUSER),
    .RVALID(m_axi_b0_RVALID),
    .RREADY(m_axi_b0_RREADY),
    .RDATA(m_axi_b0_RDATA),
    .RLAST(m_axi_b0_RLAST),
    .RID(m_axi_b0_RID),
    .RUSER(m_axi_b0_RUSER),
    .RRESP(m_axi_b0_RRESP),
    .BVALID(m_axi_b0_BVALID),
    .BREADY(m_axi_b0_BREADY),
    .BRESP(m_axi_b0_BRESP),
    .BID(m_axi_b0_BID),
    .BUSER(m_axi_b0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(read3_U0_m_axi_b0_ARVALID),
    .I_ARREADY(b0_ARREADY),
    .I_ARADDR(read3_U0_m_axi_b0_ARADDR),
    .I_ARID(read3_U0_m_axi_b0_ARID),
    .I_ARLEN(read3_U0_m_axi_b0_ARLEN),
    .I_ARSIZE(read3_U0_m_axi_b0_ARSIZE),
    .I_ARLOCK(read3_U0_m_axi_b0_ARLOCK),
    .I_ARCACHE(read3_U0_m_axi_b0_ARCACHE),
    .I_ARQOS(read3_U0_m_axi_b0_ARQOS),
    .I_ARPROT(read3_U0_m_axi_b0_ARPROT),
    .I_ARUSER(read3_U0_m_axi_b0_ARUSER),
    .I_ARBURST(read3_U0_m_axi_b0_ARBURST),
    .I_ARREGION(read3_U0_m_axi_b0_ARREGION),
    .I_RVALID(b0_RVALID),
    .I_RREADY(read3_U0_m_axi_b0_RREADY),
    .I_RDATA(b0_RDATA),
    .I_RID(b0_RID),
    .I_RUSER(b0_RUSER),
    .I_RRESP(b0_RRESP),
    .I_RLAST(b0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(b0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(b0_WREADY),
    .I_WDATA(512'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd0),
    .I_BVALID(b0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(b0_BRESP),
    .I_BID(b0_BID),
    .I_BUSER(b0_BUSER)
);

mmult_fpga_b1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B1_CACHE_VALUE ))
b1_m_axi_U(
    .AWVALID(m_axi_b1_AWVALID),
    .AWREADY(m_axi_b1_AWREADY),
    .AWADDR(m_axi_b1_AWADDR),
    .AWID(m_axi_b1_AWID),
    .AWLEN(m_axi_b1_AWLEN),
    .AWSIZE(m_axi_b1_AWSIZE),
    .AWBURST(m_axi_b1_AWBURST),
    .AWLOCK(m_axi_b1_AWLOCK),
    .AWCACHE(m_axi_b1_AWCACHE),
    .AWPROT(m_axi_b1_AWPROT),
    .AWQOS(m_axi_b1_AWQOS),
    .AWREGION(m_axi_b1_AWREGION),
    .AWUSER(m_axi_b1_AWUSER),
    .WVALID(m_axi_b1_WVALID),
    .WREADY(m_axi_b1_WREADY),
    .WDATA(m_axi_b1_WDATA),
    .WSTRB(m_axi_b1_WSTRB),
    .WLAST(m_axi_b1_WLAST),
    .WID(m_axi_b1_WID),
    .WUSER(m_axi_b1_WUSER),
    .ARVALID(m_axi_b1_ARVALID),
    .ARREADY(m_axi_b1_ARREADY),
    .ARADDR(m_axi_b1_ARADDR),
    .ARID(m_axi_b1_ARID),
    .ARLEN(m_axi_b1_ARLEN),
    .ARSIZE(m_axi_b1_ARSIZE),
    .ARBURST(m_axi_b1_ARBURST),
    .ARLOCK(m_axi_b1_ARLOCK),
    .ARCACHE(m_axi_b1_ARCACHE),
    .ARPROT(m_axi_b1_ARPROT),
    .ARQOS(m_axi_b1_ARQOS),
    .ARREGION(m_axi_b1_ARREGION),
    .ARUSER(m_axi_b1_ARUSER),
    .RVALID(m_axi_b1_RVALID),
    .RREADY(m_axi_b1_RREADY),
    .RDATA(m_axi_b1_RDATA),
    .RLAST(m_axi_b1_RLAST),
    .RID(m_axi_b1_RID),
    .RUSER(m_axi_b1_RUSER),
    .RRESP(m_axi_b1_RRESP),
    .BVALID(m_axi_b1_BVALID),
    .BREADY(m_axi_b1_BREADY),
    .BRESP(m_axi_b1_BRESP),
    .BID(m_axi_b1_BID),
    .BUSER(m_axi_b1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(read3_U0_m_axi_b1_ARVALID),
    .I_ARREADY(b1_ARREADY),
    .I_ARADDR(read3_U0_m_axi_b1_ARADDR),
    .I_ARID(read3_U0_m_axi_b1_ARID),
    .I_ARLEN(read3_U0_m_axi_b1_ARLEN),
    .I_ARSIZE(read3_U0_m_axi_b1_ARSIZE),
    .I_ARLOCK(read3_U0_m_axi_b1_ARLOCK),
    .I_ARCACHE(read3_U0_m_axi_b1_ARCACHE),
    .I_ARQOS(read3_U0_m_axi_b1_ARQOS),
    .I_ARPROT(read3_U0_m_axi_b1_ARPROT),
    .I_ARUSER(read3_U0_m_axi_b1_ARUSER),
    .I_ARBURST(read3_U0_m_axi_b1_ARBURST),
    .I_ARREGION(read3_U0_m_axi_b1_ARREGION),
    .I_RVALID(b1_RVALID),
    .I_RREADY(read3_U0_m_axi_b1_RREADY),
    .I_RDATA(b1_RDATA),
    .I_RID(b1_RID),
    .I_RUSER(b1_RUSER),
    .I_RRESP(b1_RRESP),
    .I_RLAST(b1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(b1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(b1_WREADY),
    .I_WDATA(512'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(64'd0),
    .I_BVALID(b1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(b1_BRESP),
    .I_BID(b1_BID),
    .I_BUSER(b1_BUSER)
);

mmult_fpga_b2_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B2_CACHE_VALUE ))
b2_m_axi_U(
    .AWVALID(m_axi_b2_AWVALID),
    .AWREADY(m_axi_b2_AWREADY),
    .AWADDR(m_axi_b2_AWADDR),
    .AWID(m_axi_b2_AWID),
    .AWLEN(m_axi_b2_AWLEN),
    .AWSIZE(m_axi_b2_AWSIZE),
    .AWBURST(m_axi_b2_AWBURST),
    .AWLOCK(m_axi_b2_AWLOCK),
    .AWCACHE(m_axi_b2_AWCACHE),
    .AWPROT(m_axi_b2_AWPROT),
    .AWQOS(m_axi_b2_AWQOS),
    .AWREGION(m_axi_b2_AWREGION),
    .AWUSER(m_axi_b2_AWUSER),
    .WVALID(m_axi_b2_WVALID),
    .WREADY(m_axi_b2_WREADY),
    .WDATA(m_axi_b2_WDATA),
    .WSTRB(m_axi_b2_WSTRB),
    .WLAST(m_axi_b2_WLAST),
    .WID(m_axi_b2_WID),
    .WUSER(m_axi_b2_WUSER),
    .ARVALID(m_axi_b2_ARVALID),
    .ARREADY(m_axi_b2_ARREADY),
    .ARADDR(m_axi_b2_ARADDR),
    .ARID(m_axi_b2_ARID),
    .ARLEN(m_axi_b2_ARLEN),
    .ARSIZE(m_axi_b2_ARSIZE),
    .ARBURST(m_axi_b2_ARBURST),
    .ARLOCK(m_axi_b2_ARLOCK),
    .ARCACHE(m_axi_b2_ARCACHE),
    .ARPROT(m_axi_b2_ARPROT),
    .ARQOS(m_axi_b2_ARQOS),
    .ARREGION(m_axi_b2_ARREGION),
    .ARUSER(m_axi_b2_ARUSER),
    .RVALID(m_axi_b2_RVALID),
    .RREADY(m_axi_b2_RREADY),
    .RDATA(m_axi_b2_RDATA),
    .RLAST(m_axi_b2_RLAST),
    .RID(m_axi_b2_RID),
    .RUSER(m_axi_b2_RUSER),
    .RRESP(m_axi_b2_RRESP),
    .BVALID(m_axi_b2_BVALID),
    .BREADY(m_axi_b2_BREADY),
    .BRESP(m_axi_b2_BRESP),
    .BID(m_axi_b2_BID),
    .BUSER(m_axi_b2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(b2_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(b2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(b2_RDATA),
    .I_RID(b2_RID),
    .I_RUSER(b2_RUSER),
    .I_RRESP(b2_RRESP),
    .I_RLAST(b2_RLAST),
    .I_AWVALID(write_U0_m_axi_b2_AWVALID),
    .I_AWREADY(b2_AWREADY),
    .I_AWADDR(write_U0_m_axi_b2_AWADDR),
    .I_AWID(write_U0_m_axi_b2_AWID),
    .I_AWLEN(write_U0_m_axi_b2_AWLEN),
    .I_AWSIZE(write_U0_m_axi_b2_AWSIZE),
    .I_AWLOCK(write_U0_m_axi_b2_AWLOCK),
    .I_AWCACHE(write_U0_m_axi_b2_AWCACHE),
    .I_AWQOS(write_U0_m_axi_b2_AWQOS),
    .I_AWPROT(write_U0_m_axi_b2_AWPROT),
    .I_AWUSER(write_U0_m_axi_b2_AWUSER),
    .I_AWBURST(write_U0_m_axi_b2_AWBURST),
    .I_AWREGION(write_U0_m_axi_b2_AWREGION),
    .I_WVALID(write_U0_m_axi_b2_WVALID),
    .I_WREADY(b2_WREADY),
    .I_WDATA(write_U0_m_axi_b2_WDATA),
    .I_WID(write_U0_m_axi_b2_WID),
    .I_WUSER(write_U0_m_axi_b2_WUSER),
    .I_WLAST(write_U0_m_axi_b2_WLAST),
    .I_WSTRB(write_U0_m_axi_b2_WSTRB),
    .I_BVALID(b2_BVALID),
    .I_BREADY(write_U0_m_axi_b2_BREADY),
    .I_BRESP(b2_BRESP),
    .I_BID(b2_BID),
    .I_BUSER(b2_BUSER)
);

mmult_fpga_read3 read3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(read3_U0_ap_start),
    .start_full_n(read3_U0_start_full_n),
    .ap_done(read3_U0_ap_done),
    .ap_continue(read3_U0_ap_continue),
    .ap_idle(read3_U0_ap_idle),
    .ap_ready(read3_U0_ap_ready),
    .start_out(read3_U0_start_out),
    .start_write(read3_U0_start_write),
    .m_axi_b0_AWVALID(read3_U0_m_axi_b0_AWVALID),
    .m_axi_b0_AWREADY(1'b0),
    .m_axi_b0_AWADDR(read3_U0_m_axi_b0_AWADDR),
    .m_axi_b0_AWID(read3_U0_m_axi_b0_AWID),
    .m_axi_b0_AWLEN(read3_U0_m_axi_b0_AWLEN),
    .m_axi_b0_AWSIZE(read3_U0_m_axi_b0_AWSIZE),
    .m_axi_b0_AWBURST(read3_U0_m_axi_b0_AWBURST),
    .m_axi_b0_AWLOCK(read3_U0_m_axi_b0_AWLOCK),
    .m_axi_b0_AWCACHE(read3_U0_m_axi_b0_AWCACHE),
    .m_axi_b0_AWPROT(read3_U0_m_axi_b0_AWPROT),
    .m_axi_b0_AWQOS(read3_U0_m_axi_b0_AWQOS),
    .m_axi_b0_AWREGION(read3_U0_m_axi_b0_AWREGION),
    .m_axi_b0_AWUSER(read3_U0_m_axi_b0_AWUSER),
    .m_axi_b0_WVALID(read3_U0_m_axi_b0_WVALID),
    .m_axi_b0_WREADY(1'b0),
    .m_axi_b0_WDATA(read3_U0_m_axi_b0_WDATA),
    .m_axi_b0_WSTRB(read3_U0_m_axi_b0_WSTRB),
    .m_axi_b0_WLAST(read3_U0_m_axi_b0_WLAST),
    .m_axi_b0_WID(read3_U0_m_axi_b0_WID),
    .m_axi_b0_WUSER(read3_U0_m_axi_b0_WUSER),
    .m_axi_b0_ARVALID(read3_U0_m_axi_b0_ARVALID),
    .m_axi_b0_ARREADY(b0_ARREADY),
    .m_axi_b0_ARADDR(read3_U0_m_axi_b0_ARADDR),
    .m_axi_b0_ARID(read3_U0_m_axi_b0_ARID),
    .m_axi_b0_ARLEN(read3_U0_m_axi_b0_ARLEN),
    .m_axi_b0_ARSIZE(read3_U0_m_axi_b0_ARSIZE),
    .m_axi_b0_ARBURST(read3_U0_m_axi_b0_ARBURST),
    .m_axi_b0_ARLOCK(read3_U0_m_axi_b0_ARLOCK),
    .m_axi_b0_ARCACHE(read3_U0_m_axi_b0_ARCACHE),
    .m_axi_b0_ARPROT(read3_U0_m_axi_b0_ARPROT),
    .m_axi_b0_ARQOS(read3_U0_m_axi_b0_ARQOS),
    .m_axi_b0_ARREGION(read3_U0_m_axi_b0_ARREGION),
    .m_axi_b0_ARUSER(read3_U0_m_axi_b0_ARUSER),
    .m_axi_b0_RVALID(b0_RVALID),
    .m_axi_b0_RREADY(read3_U0_m_axi_b0_RREADY),
    .m_axi_b0_RDATA(b0_RDATA),
    .m_axi_b0_RLAST(b0_RLAST),
    .m_axi_b0_RID(b0_RID),
    .m_axi_b0_RUSER(b0_RUSER),
    .m_axi_b0_RRESP(b0_RRESP),
    .m_axi_b0_BVALID(1'b0),
    .m_axi_b0_BREADY(read3_U0_m_axi_b0_BREADY),
    .m_axi_b0_BRESP(2'd0),
    .m_axi_b0_BID(1'd0),
    .m_axi_b0_BUSER(1'd0),
    .m_axi_b1_AWVALID(read3_U0_m_axi_b1_AWVALID),
    .m_axi_b1_AWREADY(1'b0),
    .m_axi_b1_AWADDR(read3_U0_m_axi_b1_AWADDR),
    .m_axi_b1_AWID(read3_U0_m_axi_b1_AWID),
    .m_axi_b1_AWLEN(read3_U0_m_axi_b1_AWLEN),
    .m_axi_b1_AWSIZE(read3_U0_m_axi_b1_AWSIZE),
    .m_axi_b1_AWBURST(read3_U0_m_axi_b1_AWBURST),
    .m_axi_b1_AWLOCK(read3_U0_m_axi_b1_AWLOCK),
    .m_axi_b1_AWCACHE(read3_U0_m_axi_b1_AWCACHE),
    .m_axi_b1_AWPROT(read3_U0_m_axi_b1_AWPROT),
    .m_axi_b1_AWQOS(read3_U0_m_axi_b1_AWQOS),
    .m_axi_b1_AWREGION(read3_U0_m_axi_b1_AWREGION),
    .m_axi_b1_AWUSER(read3_U0_m_axi_b1_AWUSER),
    .m_axi_b1_WVALID(read3_U0_m_axi_b1_WVALID),
    .m_axi_b1_WREADY(1'b0),
    .m_axi_b1_WDATA(read3_U0_m_axi_b1_WDATA),
    .m_axi_b1_WSTRB(read3_U0_m_axi_b1_WSTRB),
    .m_axi_b1_WLAST(read3_U0_m_axi_b1_WLAST),
    .m_axi_b1_WID(read3_U0_m_axi_b1_WID),
    .m_axi_b1_WUSER(read3_U0_m_axi_b1_WUSER),
    .m_axi_b1_ARVALID(read3_U0_m_axi_b1_ARVALID),
    .m_axi_b1_ARREADY(b1_ARREADY),
    .m_axi_b1_ARADDR(read3_U0_m_axi_b1_ARADDR),
    .m_axi_b1_ARID(read3_U0_m_axi_b1_ARID),
    .m_axi_b1_ARLEN(read3_U0_m_axi_b1_ARLEN),
    .m_axi_b1_ARSIZE(read3_U0_m_axi_b1_ARSIZE),
    .m_axi_b1_ARBURST(read3_U0_m_axi_b1_ARBURST),
    .m_axi_b1_ARLOCK(read3_U0_m_axi_b1_ARLOCK),
    .m_axi_b1_ARCACHE(read3_U0_m_axi_b1_ARCACHE),
    .m_axi_b1_ARPROT(read3_U0_m_axi_b1_ARPROT),
    .m_axi_b1_ARQOS(read3_U0_m_axi_b1_ARQOS),
    .m_axi_b1_ARREGION(read3_U0_m_axi_b1_ARREGION),
    .m_axi_b1_ARUSER(read3_U0_m_axi_b1_ARUSER),
    .m_axi_b1_RVALID(b1_RVALID),
    .m_axi_b1_RREADY(read3_U0_m_axi_b1_RREADY),
    .m_axi_b1_RDATA(b1_RDATA),
    .m_axi_b1_RLAST(b1_RLAST),
    .m_axi_b1_RID(b1_RID),
    .m_axi_b1_RUSER(b1_RUSER),
    .m_axi_b1_RRESP(b1_RRESP),
    .m_axi_b1_BVALID(1'b0),
    .m_axi_b1_BREADY(read3_U0_m_axi_b1_BREADY),
    .m_axi_b1_BRESP(2'd0),
    .m_axi_b1_BID(1'd0),
    .m_axi_b1_BUSER(1'd0),
    .A_tmp3_din(read3_U0_A_tmp3_din),
    .A_tmp3_full_n(A_tmp_full_n),
    .A_tmp3_write(read3_U0_A_tmp3_write),
    .B_tmp4_din(read3_U0_B_tmp4_din),
    .B_tmp4_full_n(B_tmp_full_n),
    .B_tmp4_write(read3_U0_B_tmp4_write),
    .A(A),
    .B(B),
    .C(C),
    .C_out_din(read3_U0_C_out_din),
    .C_out_full_n(C_c_full_n),
    .C_out_write(read3_U0_C_out_write),
    .ap_ext_blocking_n(read3_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(read3_U0_ap_str_blocking_n),
    .ap_int_blocking_n(read3_U0_ap_int_blocking_n)
);

mmult_fpga_execution execution_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(execution_U0_ap_start),
    .ap_done(execution_U0_ap_done),
    .ap_continue(execution_U0_ap_continue),
    .ap_idle(execution_U0_ap_idle),
    .ap_ready(execution_U0_ap_ready),
    .A_tmp_dout(A_tmp_dout),
    .A_tmp_empty_n(A_tmp_empty_n),
    .A_tmp_read(execution_U0_A_tmp_read),
    .B_tmp_dout(B_tmp_dout),
    .B_tmp_empty_n(B_tmp_empty_n),
    .B_tmp_read(execution_U0_B_tmp_read),
    .result_din(execution_U0_result_din),
    .result_full_n(result_full_n),
    .result_write(execution_U0_result_write),
    .ap_ext_blocking_n(execution_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(execution_U0_ap_str_blocking_n),
    .ap_int_blocking_n(execution_U0_ap_int_blocking_n)
);

mmult_fpga_write_r write_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(write_U0_ap_start),
    .ap_done(write_U0_ap_done),
    .ap_continue(write_U0_ap_continue),
    .ap_idle(write_U0_ap_idle),
    .ap_ready(write_U0_ap_ready),
    .result5_dout(result_dout),
    .result5_empty_n(result_empty_n),
    .result5_read(write_U0_result5_read),
    .m_axi_b2_AWVALID(write_U0_m_axi_b2_AWVALID),
    .m_axi_b2_AWREADY(b2_AWREADY),
    .m_axi_b2_AWADDR(write_U0_m_axi_b2_AWADDR),
    .m_axi_b2_AWID(write_U0_m_axi_b2_AWID),
    .m_axi_b2_AWLEN(write_U0_m_axi_b2_AWLEN),
    .m_axi_b2_AWSIZE(write_U0_m_axi_b2_AWSIZE),
    .m_axi_b2_AWBURST(write_U0_m_axi_b2_AWBURST),
    .m_axi_b2_AWLOCK(write_U0_m_axi_b2_AWLOCK),
    .m_axi_b2_AWCACHE(write_U0_m_axi_b2_AWCACHE),
    .m_axi_b2_AWPROT(write_U0_m_axi_b2_AWPROT),
    .m_axi_b2_AWQOS(write_U0_m_axi_b2_AWQOS),
    .m_axi_b2_AWREGION(write_U0_m_axi_b2_AWREGION),
    .m_axi_b2_AWUSER(write_U0_m_axi_b2_AWUSER),
    .m_axi_b2_WVALID(write_U0_m_axi_b2_WVALID),
    .m_axi_b2_WREADY(b2_WREADY),
    .m_axi_b2_WDATA(write_U0_m_axi_b2_WDATA),
    .m_axi_b2_WSTRB(write_U0_m_axi_b2_WSTRB),
    .m_axi_b2_WLAST(write_U0_m_axi_b2_WLAST),
    .m_axi_b2_WID(write_U0_m_axi_b2_WID),
    .m_axi_b2_WUSER(write_U0_m_axi_b2_WUSER),
    .m_axi_b2_ARVALID(write_U0_m_axi_b2_ARVALID),
    .m_axi_b2_ARREADY(1'b0),
    .m_axi_b2_ARADDR(write_U0_m_axi_b2_ARADDR),
    .m_axi_b2_ARID(write_U0_m_axi_b2_ARID),
    .m_axi_b2_ARLEN(write_U0_m_axi_b2_ARLEN),
    .m_axi_b2_ARSIZE(write_U0_m_axi_b2_ARSIZE),
    .m_axi_b2_ARBURST(write_U0_m_axi_b2_ARBURST),
    .m_axi_b2_ARLOCK(write_U0_m_axi_b2_ARLOCK),
    .m_axi_b2_ARCACHE(write_U0_m_axi_b2_ARCACHE),
    .m_axi_b2_ARPROT(write_U0_m_axi_b2_ARPROT),
    .m_axi_b2_ARQOS(write_U0_m_axi_b2_ARQOS),
    .m_axi_b2_ARREGION(write_U0_m_axi_b2_ARREGION),
    .m_axi_b2_ARUSER(write_U0_m_axi_b2_ARUSER),
    .m_axi_b2_RVALID(1'b0),
    .m_axi_b2_RREADY(write_U0_m_axi_b2_RREADY),
    .m_axi_b2_RDATA(512'd0),
    .m_axi_b2_RLAST(1'b0),
    .m_axi_b2_RID(1'd0),
    .m_axi_b2_RUSER(1'd0),
    .m_axi_b2_RRESP(2'd0),
    .m_axi_b2_BVALID(b2_BVALID),
    .m_axi_b2_BREADY(write_U0_m_axi_b2_BREADY),
    .m_axi_b2_BRESP(b2_BRESP),
    .m_axi_b2_BID(b2_BID),
    .m_axi_b2_BUSER(b2_BUSER),
    .output_r_dout(C_c_dout),
    .output_r_empty_n(C_c_empty_n),
    .output_r_read(write_U0_output_r_read),
    .ap_ext_blocking_n(write_U0_ap_ext_blocking_n),
    .ap_str_blocking_n(write_U0_ap_str_blocking_n),
    .ap_int_blocking_n(write_U0_ap_int_blocking_n)
);

mmult_fpga_fifo_w32_d2_S A_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read3_U0_A_tmp3_din),
    .if_full_n(A_tmp_full_n),
    .if_write(read3_U0_A_tmp3_write),
    .if_dout(A_tmp_dout),
    .if_empty_n(A_tmp_empty_n),
    .if_read(execution_U0_A_tmp_read)
);

mmult_fpga_fifo_w32_d2_S B_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read3_U0_B_tmp4_din),
    .if_full_n(B_tmp_full_n),
    .if_write(read3_U0_B_tmp4_write),
    .if_dout(B_tmp_dout),
    .if_empty_n(B_tmp_empty_n),
    .if_read(execution_U0_B_tmp_read)
);

mmult_fpga_fifo_w64_d3_S C_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read3_U0_C_out_din),
    .if_full_n(C_c_full_n),
    .if_write(read3_U0_C_out_write),
    .if_dout(C_c_dout),
    .if_empty_n(C_c_empty_n),
    .if_read(write_U0_output_r_read)
);

mmult_fpga_fifo_w32_d2_S result_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(execution_U0_result_din),
    .if_full_n(result_full_n),
    .if_write(execution_U0_result_write),
    .if_dout(result_dout),
    .if_empty_n(result_empty_n),
    .if_read(write_U0_result5_read)
);

mmult_fpga_start_for_execution_U0 start_for_execution_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_execution_U0_din),
    .if_full_n(start_for_execution_U0_full_n),
    .if_write(read3_U0_start_write),
    .if_dout(start_for_execution_U0_dout),
    .if_empty_n(start_for_execution_U0_empty_n),
    .if_read(execution_U0_ap_ready)
);

mmult_fpga_start_for_write_U0 start_for_write_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_write_U0_din),
    .if_full_n(start_for_write_U0_full_n),
    .if_write(read3_U0_start_write),
    .if_dout(start_for_write_U0_dout),
    .if_empty_n(start_for_write_U0_empty_n),
    .if_read(write_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_int_blocking_n_reg <= ap_int_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b1) & (ap_ext_blocking_n == 1'b0))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b1) & (ap_int_blocking_n == 1'b0))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b1) & (ap_str_blocking_n == 1'b0))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

assign ap_done = write_U0_ap_done;

assign ap_ext_blocking_cur_n = 1'b1;

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & ap_ext_blocking_cur_n);

assign ap_ext_blocking_sub_n = (write_U0_ap_ext_blocking_n & read3_U0_ap_ext_blocking_n & execution_U0_ap_ext_blocking_n);

assign ap_idle = (write_U0_ap_idle & read3_U0_ap_idle & execution_U0_ap_idle);

assign ap_int_blocking_cur_n = 1'b1;

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_int_blocking_sub_n = (write_U0_ap_int_blocking_n & read3_U0_ap_int_blocking_n & execution_U0_ap_int_blocking_n);

assign ap_ready = read3_U0_ap_ready;

assign ap_str_blocking_cur_n = 1'b1;

assign ap_str_blocking_n = (ap_str_blocking_sub_n & ap_str_blocking_cur_n);

assign ap_str_blocking_sub_n = (write_U0_ap_str_blocking_n & read3_U0_ap_str_blocking_n & execution_U0_ap_str_blocking_n);

assign ap_sync_continue = ap_continue;

assign ap_sync_done = write_U0_ap_done;

assign ap_sync_ready = read3_U0_ap_ready;

assign event_done = ap_done;

assign execution_U0_ap_continue = 1'b1;

assign execution_U0_ap_start = start_for_execution_U0_empty_n;

assign execution_U0_start_full_n = 1'b1;

assign execution_U0_start_write = 1'b0;

assign read3_U0_ap_continue = 1'b1;

assign read3_U0_ap_start = ap_start;

assign read3_U0_start_full_n = (start_for_write_U0_full_n & start_for_execution_U0_full_n);

assign start_for_execution_U0_din = 1'b1;

assign start_for_write_U0_din = 1'b1;

assign write_U0_ap_continue = ap_continue;

assign write_U0_ap_start = start_for_write_U0_empty_n;

assign write_U0_start_full_n = 1'b1;

assign write_U0_start_write = 1'b0;

endmodule //mmult_fpga
