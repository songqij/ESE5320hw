// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lzw_store_result (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        compressed_size_stream_dout,
        compressed_size_stream_empty_n,
        compressed_size_stream_read,
        output_hw_stream_dout,
        output_hw_stream_empty_n,
        output_hw_stream_read,
        m_axi_aximm2_AWVALID,
        m_axi_aximm2_AWREADY,
        m_axi_aximm2_AWADDR,
        m_axi_aximm2_AWID,
        m_axi_aximm2_AWLEN,
        m_axi_aximm2_AWSIZE,
        m_axi_aximm2_AWBURST,
        m_axi_aximm2_AWLOCK,
        m_axi_aximm2_AWCACHE,
        m_axi_aximm2_AWPROT,
        m_axi_aximm2_AWQOS,
        m_axi_aximm2_AWREGION,
        m_axi_aximm2_AWUSER,
        m_axi_aximm2_WVALID,
        m_axi_aximm2_WREADY,
        m_axi_aximm2_WDATA,
        m_axi_aximm2_WSTRB,
        m_axi_aximm2_WLAST,
        m_axi_aximm2_WID,
        m_axi_aximm2_WUSER,
        m_axi_aximm2_ARVALID,
        m_axi_aximm2_ARREADY,
        m_axi_aximm2_ARADDR,
        m_axi_aximm2_ARID,
        m_axi_aximm2_ARLEN,
        m_axi_aximm2_ARSIZE,
        m_axi_aximm2_ARBURST,
        m_axi_aximm2_ARLOCK,
        m_axi_aximm2_ARCACHE,
        m_axi_aximm2_ARPROT,
        m_axi_aximm2_ARQOS,
        m_axi_aximm2_ARREGION,
        m_axi_aximm2_ARUSER,
        m_axi_aximm2_RVALID,
        m_axi_aximm2_RREADY,
        m_axi_aximm2_RDATA,
        m_axi_aximm2_RLAST,
        m_axi_aximm2_RID,
        m_axi_aximm2_RUSER,
        m_axi_aximm2_RRESP,
        m_axi_aximm2_BVALID,
        m_axi_aximm2_BREADY,
        m_axi_aximm2_BRESP,
        m_axi_aximm2_BID,
        m_axi_aximm2_BUSER,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        compressed_data_dout,
        compressed_data_empty_n,
        compressed_data_read,
        compressed_size_dout,
        compressed_size_empty_n,
        compressed_size_read
);

parameter    ap_ST_fsm_state1 = 140'd1;
parameter    ap_ST_fsm_state2 = 140'd2;
parameter    ap_ST_fsm_state3 = 140'd4;
parameter    ap_ST_fsm_state4 = 140'd8;
parameter    ap_ST_fsm_state5 = 140'd16;
parameter    ap_ST_fsm_state6 = 140'd32;
parameter    ap_ST_fsm_state7 = 140'd64;
parameter    ap_ST_fsm_state8 = 140'd128;
parameter    ap_ST_fsm_state9 = 140'd256;
parameter    ap_ST_fsm_state10 = 140'd512;
parameter    ap_ST_fsm_state11 = 140'd1024;
parameter    ap_ST_fsm_state12 = 140'd2048;
parameter    ap_ST_fsm_state13 = 140'd4096;
parameter    ap_ST_fsm_state14 = 140'd8192;
parameter    ap_ST_fsm_state15 = 140'd16384;
parameter    ap_ST_fsm_state16 = 140'd32768;
parameter    ap_ST_fsm_state17 = 140'd65536;
parameter    ap_ST_fsm_state18 = 140'd131072;
parameter    ap_ST_fsm_state19 = 140'd262144;
parameter    ap_ST_fsm_state20 = 140'd524288;
parameter    ap_ST_fsm_state21 = 140'd1048576;
parameter    ap_ST_fsm_state22 = 140'd2097152;
parameter    ap_ST_fsm_state23 = 140'd4194304;
parameter    ap_ST_fsm_state24 = 140'd8388608;
parameter    ap_ST_fsm_state25 = 140'd16777216;
parameter    ap_ST_fsm_state26 = 140'd33554432;
parameter    ap_ST_fsm_state27 = 140'd67108864;
parameter    ap_ST_fsm_state28 = 140'd134217728;
parameter    ap_ST_fsm_state29 = 140'd268435456;
parameter    ap_ST_fsm_state30 = 140'd536870912;
parameter    ap_ST_fsm_state31 = 140'd1073741824;
parameter    ap_ST_fsm_state32 = 140'd2147483648;
parameter    ap_ST_fsm_state33 = 140'd4294967296;
parameter    ap_ST_fsm_state34 = 140'd8589934592;
parameter    ap_ST_fsm_state35 = 140'd17179869184;
parameter    ap_ST_fsm_state36 = 140'd34359738368;
parameter    ap_ST_fsm_state37 = 140'd68719476736;
parameter    ap_ST_fsm_state38 = 140'd137438953472;
parameter    ap_ST_fsm_state39 = 140'd274877906944;
parameter    ap_ST_fsm_state40 = 140'd549755813888;
parameter    ap_ST_fsm_state41 = 140'd1099511627776;
parameter    ap_ST_fsm_state42 = 140'd2199023255552;
parameter    ap_ST_fsm_state43 = 140'd4398046511104;
parameter    ap_ST_fsm_state44 = 140'd8796093022208;
parameter    ap_ST_fsm_state45 = 140'd17592186044416;
parameter    ap_ST_fsm_state46 = 140'd35184372088832;
parameter    ap_ST_fsm_state47 = 140'd70368744177664;
parameter    ap_ST_fsm_state48 = 140'd140737488355328;
parameter    ap_ST_fsm_state49 = 140'd281474976710656;
parameter    ap_ST_fsm_state50 = 140'd562949953421312;
parameter    ap_ST_fsm_state51 = 140'd1125899906842624;
parameter    ap_ST_fsm_state52 = 140'd2251799813685248;
parameter    ap_ST_fsm_state53 = 140'd4503599627370496;
parameter    ap_ST_fsm_state54 = 140'd9007199254740992;
parameter    ap_ST_fsm_state55 = 140'd18014398509481984;
parameter    ap_ST_fsm_state56 = 140'd36028797018963968;
parameter    ap_ST_fsm_state57 = 140'd72057594037927936;
parameter    ap_ST_fsm_state58 = 140'd144115188075855872;
parameter    ap_ST_fsm_state59 = 140'd288230376151711744;
parameter    ap_ST_fsm_state60 = 140'd576460752303423488;
parameter    ap_ST_fsm_state61 = 140'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 140'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 140'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 140'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 140'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 140'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 140'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 140'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 140'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 140'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 140'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage0 = 140'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 140'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 140'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 140'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 140'd37778931862957161709568;
parameter    ap_ST_fsm_state79 = 140'd75557863725914323419136;
parameter    ap_ST_fsm_state80 = 140'd151115727451828646838272;
parameter    ap_ST_fsm_state81 = 140'd302231454903657293676544;
parameter    ap_ST_fsm_state82 = 140'd604462909807314587353088;
parameter    ap_ST_fsm_state83 = 140'd1208925819614629174706176;
parameter    ap_ST_fsm_state84 = 140'd2417851639229258349412352;
parameter    ap_ST_fsm_state85 = 140'd4835703278458516698824704;
parameter    ap_ST_fsm_state86 = 140'd9671406556917033397649408;
parameter    ap_ST_fsm_state87 = 140'd19342813113834066795298816;
parameter    ap_ST_fsm_state88 = 140'd38685626227668133590597632;
parameter    ap_ST_fsm_state89 = 140'd77371252455336267181195264;
parameter    ap_ST_fsm_state90 = 140'd154742504910672534362390528;
parameter    ap_ST_fsm_state91 = 140'd309485009821345068724781056;
parameter    ap_ST_fsm_state92 = 140'd618970019642690137449562112;
parameter    ap_ST_fsm_state93 = 140'd1237940039285380274899124224;
parameter    ap_ST_fsm_state94 = 140'd2475880078570760549798248448;
parameter    ap_ST_fsm_state95 = 140'd4951760157141521099596496896;
parameter    ap_ST_fsm_state96 = 140'd9903520314283042199192993792;
parameter    ap_ST_fsm_state97 = 140'd19807040628566084398385987584;
parameter    ap_ST_fsm_state98 = 140'd39614081257132168796771975168;
parameter    ap_ST_fsm_state99 = 140'd79228162514264337593543950336;
parameter    ap_ST_fsm_state100 = 140'd158456325028528675187087900672;
parameter    ap_ST_fsm_state101 = 140'd316912650057057350374175801344;
parameter    ap_ST_fsm_state102 = 140'd633825300114114700748351602688;
parameter    ap_ST_fsm_state103 = 140'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state104 = 140'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state105 = 140'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state106 = 140'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state107 = 140'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state108 = 140'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state109 = 140'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state110 = 140'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state111 = 140'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state112 = 140'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state113 = 140'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state114 = 140'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 140'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 140'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 140'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 140'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 140'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 140'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 140'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 140'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 140'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 140'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 140'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 140'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 140'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 140'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 140'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 140'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 140'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 140'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 140'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 140'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 140'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 140'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 140'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 140'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 140'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 140'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 140'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 140'd696898287454081973172991196020261297061888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] compressed_size_stream_dout;
input   compressed_size_stream_empty_n;
output   compressed_size_stream_read;
input  [7:0] output_hw_stream_dout;
input   output_hw_stream_empty_n;
output   output_hw_stream_read;
output   m_axi_aximm2_AWVALID;
input   m_axi_aximm2_AWREADY;
output  [63:0] m_axi_aximm2_AWADDR;
output  [0:0] m_axi_aximm2_AWID;
output  [31:0] m_axi_aximm2_AWLEN;
output  [2:0] m_axi_aximm2_AWSIZE;
output  [1:0] m_axi_aximm2_AWBURST;
output  [1:0] m_axi_aximm2_AWLOCK;
output  [3:0] m_axi_aximm2_AWCACHE;
output  [2:0] m_axi_aximm2_AWPROT;
output  [3:0] m_axi_aximm2_AWQOS;
output  [3:0] m_axi_aximm2_AWREGION;
output  [0:0] m_axi_aximm2_AWUSER;
output   m_axi_aximm2_WVALID;
input   m_axi_aximm2_WREADY;
output  [7:0] m_axi_aximm2_WDATA;
output  [0:0] m_axi_aximm2_WSTRB;
output   m_axi_aximm2_WLAST;
output  [0:0] m_axi_aximm2_WID;
output  [0:0] m_axi_aximm2_WUSER;
output   m_axi_aximm2_ARVALID;
input   m_axi_aximm2_ARREADY;
output  [63:0] m_axi_aximm2_ARADDR;
output  [0:0] m_axi_aximm2_ARID;
output  [31:0] m_axi_aximm2_ARLEN;
output  [2:0] m_axi_aximm2_ARSIZE;
output  [1:0] m_axi_aximm2_ARBURST;
output  [1:0] m_axi_aximm2_ARLOCK;
output  [3:0] m_axi_aximm2_ARCACHE;
output  [2:0] m_axi_aximm2_ARPROT;
output  [3:0] m_axi_aximm2_ARQOS;
output  [3:0] m_axi_aximm2_ARREGION;
output  [0:0] m_axi_aximm2_ARUSER;
input   m_axi_aximm2_RVALID;
output   m_axi_aximm2_RREADY;
input  [7:0] m_axi_aximm2_RDATA;
input   m_axi_aximm2_RLAST;
input  [0:0] m_axi_aximm2_RID;
input  [0:0] m_axi_aximm2_RUSER;
input  [1:0] m_axi_aximm2_RRESP;
input   m_axi_aximm2_BVALID;
output   m_axi_aximm2_BREADY;
input  [1:0] m_axi_aximm2_BRESP;
input  [0:0] m_axi_aximm2_BID;
input  [0:0] m_axi_aximm2_BUSER;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] compressed_data_dout;
input   compressed_data_empty_n;
output   compressed_data_read;
input  [63:0] compressed_size_dout;
input   compressed_size_empty_n;
output   compressed_size_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg compressed_size_stream_read;
reg output_hw_stream_read;
reg m_axi_aximm2_AWVALID;
reg m_axi_aximm2_WVALID;
reg m_axi_aximm2_BREADY;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_BREADY;
reg compressed_data_read;
reg compressed_size_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [139:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    compressed_size_stream_blk_n;
reg    output_hw_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln239_1_reg_238;
reg    aximm2_blk_n_AW;
wire    ap_CS_fsm_state71;
reg   [0:0] icmp_ln239_reg_218;
reg    aximm2_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln239_1_reg_238_pp0_iter1_reg;
reg    aximm2_blk_n_B;
wire    ap_CS_fsm_state142;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state3;
reg    gmem_blk_n_B;
reg    compressed_data_blk_n;
reg    compressed_size_blk_n;
reg   [30:0] i_reg_143;
reg   [63:0] compressed_data_read_reg_199;
reg   [31:0] tmp_V_1_reg_204;
reg   [63:0] gmem_addr_reg_212;
wire   [0:0] icmp_ln239_fu_174_p2;
wire    ap_CS_fsm_state70;
wire   [30:0] trunc_ln239_fu_179_p1;
reg   [30:0] trunc_ln239_reg_222;
wire   [30:0] add_ln239_fu_188_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state72_pp0_stage0_iter0;
reg    ap_block_state73_pp0_stage0_iter1;
wire    ap_block_state74_pp0_stage0_iter2;
reg    ap_block_state74_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln239_1_fu_194_p2;
reg   [7:0] tmp_V_reg_242;
reg    ap_block_state71_io;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state72;
wire  signed [63:0] sext_ln237_fu_164_p1;
reg    ap_block_state142;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
wire   [61:0] trunc_ln_fu_154_p4;
reg   [139:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 140'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state142))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state72) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state72)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state72);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        i_reg_143 <= 31'd0;
    end else if (((icmp_ln239_1_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_143 <= add_ln239_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        compressed_data_read_reg_199 <= compressed_data_dout;
        gmem_addr_reg_212 <= sext_ln237_fu_164_p1;
        tmp_V_1_reg_204 <= compressed_size_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln239_1_reg_238 <= icmp_ln239_1_fu_194_p2;
        icmp_ln239_1_reg_238_pp0_iter1_reg <= icmp_ln239_1_reg_238;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        icmp_ln239_reg_218 <= icmp_ln239_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln239_1_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_reg_242 <= output_hw_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        trunc_ln239_reg_222 <= trunc_ln239_fu_179_p1;
    end
end

always @ (*) begin
    if ((icmp_ln239_1_fu_194_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state72 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state72 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state142))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state142))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        aximm2_blk_n_AW = m_axi_aximm2_AWREADY;
    end else begin
        aximm2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state142))) begin
        aximm2_blk_n_B = m_axi_aximm2_BVALID;
    end else begin
        aximm2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln239_1_reg_238_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        aximm2_blk_n_W = m_axi_aximm2_WREADY;
    end else begin
        aximm2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        compressed_data_blk_n = compressed_data_empty_n;
    end else begin
        compressed_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((compressed_size_empty_n == 1'b0) | (compressed_data_empty_n == 1'b0) | (compressed_size_stream_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        compressed_data_read = 1'b1;
    end else begin
        compressed_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        compressed_size_blk_n = compressed_size_empty_n;
    end else begin
        compressed_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((compressed_size_empty_n == 1'b0) | (compressed_data_empty_n == 1'b0) | (compressed_size_stream_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        compressed_size_read = 1'b1;
    end else begin
        compressed_size_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        compressed_size_stream_blk_n = compressed_size_stream_empty_n;
    end else begin
        compressed_size_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((compressed_size_empty_n == 1'b0) | (compressed_data_empty_n == 1'b0) | (compressed_size_stream_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        compressed_size_stream_read = 1'b1;
    end else begin
        compressed_size_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
        m_axi_aximm2_AWVALID = 1'b1;
    end else begin
        m_axi_aximm2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_BVALID == 1'b0)) & (icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state142))) begin
        m_axi_aximm2_BREADY = 1'b1;
    end else begin
        m_axi_aximm2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln239_1_reg_238_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_aximm2_WVALID = 1'b1;
    end else begin
        m_axi_aximm2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (1'b1 == ap_CS_fsm_state71))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln239_1_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_hw_stream_blk_n = output_hw_stream_empty_n;
    end else begin
        output_hw_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln239_1_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_hw_stream_read = 1'b1;
    end else begin
        output_hw_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((compressed_size_empty_n == 1'b0) | (compressed_data_empty_n == 1'b0) | (compressed_size_stream_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (icmp_ln239_reg_218 == 1'd1) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((m_axi_gmem_BVALID == 1'b0) | (1'b1 == ap_block_state71_io)) & (icmp_ln239_reg_218 == 1'd0) & (1'b1 == ap_CS_fsm_state71))) begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln239_1_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln239_1_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            if ((~((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state142))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln239_fu_188_p2 = (i_reg_143 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln239_1_reg_238 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (output_hw_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state74_io)) | ((icmp_ln239_1_reg_238 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (output_hw_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state74_io)) | ((icmp_ln239_1_reg_238 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (output_hw_stream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((compressed_size_empty_n == 1'b0) | (compressed_data_empty_n == 1'b0) | (compressed_size_stream_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state142 = ((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state71_io = ((icmp_ln239_reg_218 == 1'd1) & (m_axi_aximm2_AWREADY == 1'b0));
end

assign ap_block_state72_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter1 = ((icmp_ln239_1_reg_238 == 1'd0) & (output_hw_stream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state74_io = ((icmp_ln239_1_reg_238_pp0_iter1_reg == 1'd0) & (m_axi_aximm2_WREADY == 1'b0));
end

assign ap_block_state74_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln239_1_fu_194_p2 = ((i_reg_143 == trunc_ln239_reg_222) ? 1'b1 : 1'b0);

assign icmp_ln239_fu_174_p2 = (($signed(tmp_V_1_reg_204) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign m_axi_aximm2_ARADDR = 64'd0;

assign m_axi_aximm2_ARBURST = 2'd0;

assign m_axi_aximm2_ARCACHE = 4'd0;

assign m_axi_aximm2_ARID = 1'd0;

assign m_axi_aximm2_ARLEN = 32'd0;

assign m_axi_aximm2_ARLOCK = 2'd0;

assign m_axi_aximm2_ARPROT = 3'd0;

assign m_axi_aximm2_ARQOS = 4'd0;

assign m_axi_aximm2_ARREGION = 4'd0;

assign m_axi_aximm2_ARSIZE = 3'd0;

assign m_axi_aximm2_ARUSER = 1'd0;

assign m_axi_aximm2_ARVALID = 1'b0;

assign m_axi_aximm2_AWADDR = compressed_data_read_reg_199;

assign m_axi_aximm2_AWBURST = 2'd0;

assign m_axi_aximm2_AWCACHE = 4'd0;

assign m_axi_aximm2_AWID = 1'd0;

assign m_axi_aximm2_AWLEN = tmp_V_1_reg_204;

assign m_axi_aximm2_AWLOCK = 2'd0;

assign m_axi_aximm2_AWPROT = 3'd0;

assign m_axi_aximm2_AWQOS = 4'd0;

assign m_axi_aximm2_AWREGION = 4'd0;

assign m_axi_aximm2_AWSIZE = 3'd0;

assign m_axi_aximm2_AWUSER = 1'd0;

assign m_axi_aximm2_RREADY = 1'b0;

assign m_axi_aximm2_WDATA = tmp_V_reg_242;

assign m_axi_aximm2_WID = 1'd0;

assign m_axi_aximm2_WLAST = 1'b0;

assign m_axi_aximm2_WSTRB = 1'd1;

assign m_axi_aximm2_WUSER = 1'd0;

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_212;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = tmp_V_1_reg_204;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign sext_ln237_fu_164_p1 = $signed(trunc_ln_fu_154_p4);

assign trunc_ln239_fu_179_p1 = tmp_V_1_reg_204[30:0];

assign trunc_ln_fu_154_p4 = {{compressed_size_dout[63:2]}};

endmodule //lzw_store_result
