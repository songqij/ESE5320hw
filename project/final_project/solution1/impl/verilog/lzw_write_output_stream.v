// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lzw_write_output_stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        codeword_stream_dout,
        codeword_stream_empty_n,
        codeword_stream_read,
        output_hw_stream_din,
        output_hw_stream_full_n,
        output_hw_stream_write,
        compressed_size_stream_din,
        compressed_size_stream_full_n,
        compressed_size_stream_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] codeword_stream_dout;
input   codeword_stream_empty_n;
output   codeword_stream_read;
output  [7:0] output_hw_stream_din;
input   output_hw_stream_full_n;
output   output_hw_stream_write;
output  [31:0] compressed_size_stream_din;
input   compressed_size_stream_full_n;
output   compressed_size_stream_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg codeword_stream_read;
reg[7:0] output_hw_stream_din;
reg output_hw_stream_write;
reg compressed_size_stream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    codeword_stream_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_nbreadreq_fu_70_p3;
reg    output_hw_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln214_1_reg_369;
wire   [0:0] icmp_ln222_fu_199_p2;
reg    compressed_size_stream_blk_n;
wire    ap_CS_fsm_state6;
reg   [31:0] bit_count_2_reg_109;
wire   [31:0] bit_buffer_1_fu_148_p3;
reg   [31:0] bit_buffer_1_reg_342;
wire   [18:0] trunc_ln_fu_160_p3;
reg   [18:0] trunc_ln_reg_347;
reg    ap_predicate_op40_write_state2;
reg    ap_block_state2;
wire   [31:0] bit_count_1_fu_168_p2;
wire   [0:0] icmp_ln214_fu_184_p2;
reg   [0:0] icmp_ln214_reg_357;
wire   [31:0] size_3_fu_222_p2;
wire   [0:0] icmp_ln214_1_fu_238_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] bit_count_3_fu_244_p2;
reg   [31:0] bit_count_3_reg_373;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [18:0] bit_buffer_reg_98;
reg    ap_block_state1;
wire    ap_CS_fsm_state5;
reg   [31:0] ap_phi_mux_bit_count_2_phi_fu_112_p4;
reg   [31:0] size_4_reg_118;
reg   [31:0] bit_count_fu_62;
wire   [31:0] zext_ln214_fu_289_p1;
reg   [31:0] size_fu_66;
wire   [31:0] add_ln214_2_fu_303_p2;
wire   [7:0] byte_fu_217_p1;
wire   [7:0] byte_1_fu_254_p1;
reg    ap_block_pp0_stage0_01001;
wire   [12:0] code_1_fu_144_p1;
wire   [5:0] trunc_ln204_fu_156_p1;
wire   [28:0] tmp_1_fu_174_p4;
wire   [31:0] zext_ln206_fu_195_p1;
wire   [31:0] sub_ln223_fu_205_p2;
wire   [31:0] shl_ln223_fu_211_p2;
wire   [28:0] tmp_2_fu_228_p4;
wire   [31:0] lshr_ln215_fu_250_p2;
wire   [2:0] trunc_ln214_fu_259_p1;
wire   [31:0] add_ln214_fu_263_p2;
wire   [28:0] trunc_ln1_fu_275_p4;
wire   [2:0] add_ln214_1_fu_269_p2;
wire   [29:0] zext_ln214_1_fu_285_p1;
wire   [29:0] add_ln214_3_fu_293_p2;
wire   [31:0] zext_ln214_2_fu_299_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_273;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((compressed_size_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln214_fu_184_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln214_fu_184_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bit_buffer_reg_98 <= trunc_ln_reg_347;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bit_buffer_reg_98 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln214_fu_184_p2 == 1'd1))) begin
        bit_count_2_reg_109 <= bit_count_1_fu_168_p2;
    end else if (((icmp_ln214_1_reg_369 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bit_count_2_reg_109 <= bit_count_3_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        bit_count_fu_62 <= 32'd0;
    end else if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln214_fu_184_p2 == 1'd0))) begin
        bit_count_fu_62 <= bit_count_1_fu_168_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln214_reg_357 == 1'd1))) begin
        bit_count_fu_62 <= zext_ln214_fu_289_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_273)) begin
        if ((icmp_ln222_fu_199_p2 == 1'd0)) begin
            size_4_reg_118 <= size_fu_66;
        end else if ((icmp_ln222_fu_199_p2 == 1'd1)) begin
            size_4_reg_118 <= size_3_fu_222_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_fu_66 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln214_reg_357 == 1'd1))) begin
        size_fu_66 <= add_ln214_2_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        bit_buffer_1_reg_342 <= bit_buffer_1_fu_148_p3;
        icmp_ln214_reg_357 <= icmp_ln214_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln214_1_fu_238_p2 == 1'd1))) begin
        bit_count_3_reg_373 <= bit_count_3_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln214_1_reg_369 <= icmp_ln214_1_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln_reg_347 <= trunc_ln_fu_160_p3;
    end
end

always @ (*) begin
    if ((icmp_ln214_1_fu_238_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((compressed_size_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln214_1_reg_369 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_bit_count_2_phi_fu_112_p4 = bit_count_3_reg_373;
    end else begin
        ap_phi_mux_bit_count_2_phi_fu_112_p4 = bit_count_2_reg_109;
    end
end

always @ (*) begin
    if (((compressed_size_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        codeword_stream_blk_n = codeword_stream_empty_n;
    end else begin
        codeword_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        codeword_stream_read = 1'b1;
    end else begin
        codeword_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        compressed_size_stream_blk_n = compressed_size_stream_full_n;
    end else begin
        compressed_size_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((compressed_size_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        compressed_size_stream_write = 1'b1;
    end else begin
        compressed_size_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln222_fu_199_p2 == 1'd1) & (tmp_nbreadreq_fu_70_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln214_1_reg_369 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_hw_stream_blk_n = output_hw_stream_full_n;
    end else begin
        output_hw_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln214_1_reg_369 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_hw_stream_din = byte_1_fu_254_p1;
    end else if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (ap_predicate_op40_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_hw_stream_din = byte_fu_217_p1;
    end else begin
        output_hw_stream_din = 'bx;
    end
end

always @ (*) begin
    if (((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (ap_predicate_op40_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln214_1_reg_369 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_hw_stream_write = 1'b1;
    end else begin
        output_hw_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln214_fu_184_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln214_fu_184_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln214_1_fu_238_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln214_1_fu_238_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((compressed_size_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_1_fu_269_p2 = ($signed(trunc_ln214_fu_259_p1) + $signed(3'd5));

assign add_ln214_2_fu_303_p2 = (zext_ln214_2_fu_299_p1 + size_fu_66);

assign add_ln214_3_fu_293_p2 = (zext_ln214_1_fu_285_p1 + 30'd1);

assign add_ln214_fu_263_p2 = (bit_count_fu_62 + 32'd5);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln214_1_reg_369 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (output_hw_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln214_1_reg_369 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (output_hw_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln214_1_reg_369 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (output_hw_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = (((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln214_1_reg_369 == 1'd1) & (output_hw_stream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_273 = (~(((ap_predicate_op40_write_state2 == 1'b1) & (output_hw_stream_full_n == 1'b0)) | ((tmp_nbreadreq_fu_70_p3 == 1'd1) & (codeword_stream_empty_n == 1'b0))) & (tmp_nbreadreq_fu_70_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op40_write_state2 = ((icmp_ln222_fu_199_p2 == 1'd1) & (tmp_nbreadreq_fu_70_p3 == 1'd0));
end

assign bit_buffer_1_fu_148_p3 = {{bit_buffer_reg_98}, {code_1_fu_144_p1}};

assign bit_count_1_fu_168_p2 = (bit_count_fu_62 + 32'd13);

assign bit_count_3_fu_244_p2 = ($signed(ap_phi_mux_bit_count_2_phi_fu_112_p4) + $signed(32'd4294967288));

assign byte_1_fu_254_p1 = lshr_ln215_fu_250_p2[7:0];

assign byte_fu_217_p1 = shl_ln223_fu_211_p2[7:0];

assign code_1_fu_144_p1 = codeword_stream_dout[12:0];

assign compressed_size_stream_din = size_4_reg_118;

assign icmp_ln214_1_fu_238_p2 = (($signed(tmp_2_fu_228_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_184_p2 = (($signed(tmp_1_fu_174_p4) > $signed(29'd0)) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_199_p2 = (($signed(bit_count_fu_62) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign lshr_ln215_fu_250_p2 = bit_buffer_1_reg_342 >> bit_count_3_reg_373;

assign shl_ln223_fu_211_p2 = zext_ln206_fu_195_p1 << sub_ln223_fu_205_p2;

assign size_3_fu_222_p2 = (size_fu_66 + 32'd1);

assign sub_ln223_fu_205_p2 = (32'd8 - bit_count_fu_62);

assign tmp_1_fu_174_p4 = {{bit_count_1_fu_168_p2[31:3]}};

assign tmp_2_fu_228_p4 = {{ap_phi_mux_bit_count_2_phi_fu_112_p4[31:3]}};

assign tmp_nbreadreq_fu_70_p3 = codeword_stream_empty_n;

assign trunc_ln1_fu_275_p4 = {{add_ln214_fu_263_p2[31:3]}};

assign trunc_ln204_fu_156_p1 = bit_buffer_reg_98[5:0];

assign trunc_ln214_fu_259_p1 = bit_count_fu_62[2:0];

assign trunc_ln_fu_160_p3 = {{trunc_ln204_fu_156_p1}, {code_1_fu_144_p1}};

assign zext_ln206_fu_195_p1 = bit_buffer_reg_98;

assign zext_ln214_1_fu_285_p1 = trunc_ln1_fu_275_p4;

assign zext_ln214_2_fu_299_p1 = add_ln214_3_fu_293_p2;

assign zext_ln214_fu_289_p1 = add_ln214_1_fu_269_p2;

endmodule //lzw_write_output_stream
