-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lzw is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXIMM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_AXIMM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXIMM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_AXIMM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXIMM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXIMM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXIMM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXIMM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_AXIMM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXIMM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXIMM2_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_aximm1_AWVALID : OUT STD_LOGIC;
    m_axi_aximm1_AWREADY : IN STD_LOGIC;
    m_axi_aximm1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ADDR_WIDTH-1 downto 0);
    m_axi_aximm1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ID_WIDTH-1 downto 0);
    m_axi_aximm1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_aximm1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_AWUSER_WIDTH-1 downto 0);
    m_axi_aximm1_WVALID : OUT STD_LOGIC;
    m_axi_aximm1_WREADY : IN STD_LOGIC;
    m_axi_aximm1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_DATA_WIDTH-1 downto 0);
    m_axi_aximm1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_DATA_WIDTH/8-1 downto 0);
    m_axi_aximm1_WLAST : OUT STD_LOGIC;
    m_axi_aximm1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ID_WIDTH-1 downto 0);
    m_axi_aximm1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_WUSER_WIDTH-1 downto 0);
    m_axi_aximm1_ARVALID : OUT STD_LOGIC;
    m_axi_aximm1_ARREADY : IN STD_LOGIC;
    m_axi_aximm1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ADDR_WIDTH-1 downto 0);
    m_axi_aximm1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ID_WIDTH-1 downto 0);
    m_axi_aximm1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_aximm1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ARUSER_WIDTH-1 downto 0);
    m_axi_aximm1_RVALID : IN STD_LOGIC;
    m_axi_aximm1_RREADY : OUT STD_LOGIC;
    m_axi_aximm1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_DATA_WIDTH-1 downto 0);
    m_axi_aximm1_RLAST : IN STD_LOGIC;
    m_axi_aximm1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ID_WIDTH-1 downto 0);
    m_axi_aximm1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_RUSER_WIDTH-1 downto 0);
    m_axi_aximm1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm1_BVALID : IN STD_LOGIC;
    m_axi_aximm1_BREADY : OUT STD_LOGIC;
    m_axi_aximm1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_ID_WIDTH-1 downto 0);
    m_axi_aximm1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_aximm2_AWVALID : OUT STD_LOGIC;
    m_axi_aximm2_AWREADY : IN STD_LOGIC;
    m_axi_aximm2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ADDR_WIDTH-1 downto 0);
    m_axi_aximm2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ID_WIDTH-1 downto 0);
    m_axi_aximm2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_aximm2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_AWUSER_WIDTH-1 downto 0);
    m_axi_aximm2_WVALID : OUT STD_LOGIC;
    m_axi_aximm2_WREADY : IN STD_LOGIC;
    m_axi_aximm2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_DATA_WIDTH-1 downto 0);
    m_axi_aximm2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_DATA_WIDTH/8-1 downto 0);
    m_axi_aximm2_WLAST : OUT STD_LOGIC;
    m_axi_aximm2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ID_WIDTH-1 downto 0);
    m_axi_aximm2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_WUSER_WIDTH-1 downto 0);
    m_axi_aximm2_ARVALID : OUT STD_LOGIC;
    m_axi_aximm2_ARREADY : IN STD_LOGIC;
    m_axi_aximm2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ADDR_WIDTH-1 downto 0);
    m_axi_aximm2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ID_WIDTH-1 downto 0);
    m_axi_aximm2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_aximm2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_aximm2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_aximm2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ARUSER_WIDTH-1 downto 0);
    m_axi_aximm2_RVALID : IN STD_LOGIC;
    m_axi_aximm2_RREADY : OUT STD_LOGIC;
    m_axi_aximm2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_DATA_WIDTH-1 downto 0);
    m_axi_aximm2_RLAST : IN STD_LOGIC;
    m_axi_aximm2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ID_WIDTH-1 downto 0);
    m_axi_aximm2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_RUSER_WIDTH-1 downto 0);
    m_axi_aximm2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_BVALID : IN STD_LOGIC;
    m_axi_aximm2_BREADY : OUT STD_LOGIC;
    m_axi_aximm2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_aximm2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_ID_WIDTH-1 downto 0);
    m_axi_aximm2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXIMM2_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of lzw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lzw_lzw,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=79,HLS_SYN_DSP=0,HLS_SYN_FF=4910,HLS_SYN_LUT=8660,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal in_r : STD_LOGIC_VECTOR (63 downto 0);
    signal chunk_size : STD_LOGIC_VECTOR (63 downto 0);
    signal compressed_data : STD_LOGIC_VECTOR (63 downto 0);
    signal compressed_size : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal aximm1_AWREADY : STD_LOGIC;
    signal aximm1_WREADY : STD_LOGIC;
    signal aximm1_ARREADY : STD_LOGIC;
    signal aximm1_RVALID : STD_LOGIC;
    signal aximm1_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal aximm1_RLAST : STD_LOGIC;
    signal aximm1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal aximm1_BVALID : STD_LOGIC;
    signal aximm1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal aximm1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm2_AWREADY : STD_LOGIC;
    signal aximm2_WREADY : STD_LOGIC;
    signal aximm2_ARREADY : STD_LOGIC;
    signal aximm2_RVALID : STD_LOGIC;
    signal aximm2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal aximm2_RLAST : STD_LOGIC;
    signal aximm2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal aximm2_BVALID : STD_LOGIC;
    signal aximm2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal aximm2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal aximm2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_ap_start : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_done : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_continue : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_idle : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_ready : STD_LOGIC;
    signal Block_split1_proc9_U0_start_out : STD_LOGIC;
    signal Block_split1_proc9_U0_start_write : STD_LOGIC;
    signal Block_split1_proc9_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal Block_split1_proc9_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal Block_split1_proc9_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal Block_split1_proc9_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal Block_split1_proc9_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal Block_split1_proc9_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal Block_split1_proc9_U0_gmem_load_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split1_proc9_U0_gmem_load_out_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_in_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_in_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_compressed_data_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_compressed_data_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_compressed_size_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_compressed_size_out_write : STD_LOGIC;
    signal load_input_U0_ap_start : STD_LOGIC;
    signal load_input_U0_ap_done : STD_LOGIC;
    signal load_input_U0_ap_continue : STD_LOGIC;
    signal load_input_U0_ap_idle : STD_LOGIC;
    signal load_input_U0_ap_ready : STD_LOGIC;
    signal load_input_U0_start_out : STD_LOGIC;
    signal load_input_U0_start_write : STD_LOGIC;
    signal load_input_U0_m_axi_aximm1_AWVALID : STD_LOGIC;
    signal load_input_U0_m_axi_aximm1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_input_U0_m_axi_aximm1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_aximm1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_aximm1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_aximm1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_aximm1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_aximm1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_aximm1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_aximm1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_aximm1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_WVALID : STD_LOGIC;
    signal load_input_U0_m_axi_aximm1_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal load_input_U0_m_axi_aximm1_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_WLAST : STD_LOGIC;
    signal load_input_U0_m_axi_aximm1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_ARVALID : STD_LOGIC;
    signal load_input_U0_m_axi_aximm1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_input_U0_m_axi_aximm1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_aximm1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_aximm1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_aximm1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_aximm1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_aximm1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_aximm1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_aximm1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_aximm1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_aximm1_RREADY : STD_LOGIC;
    signal load_input_U0_m_axi_aximm1_BREADY : STD_LOGIC;
    signal load_input_U0_inStream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal load_input_U0_inStream_write : STD_LOGIC;
    signal load_input_U0_in_r_read : STD_LOGIC;
    signal load_input_U0_gmem_load_loc_read : STD_LOGIC;
    signal load_input_U0_gmem_load_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_gmem_load_loc_out_write : STD_LOGIC;
    signal compress_stream_U0_ap_start : STD_LOGIC;
    signal compress_stream_U0_ap_done : STD_LOGIC;
    signal compress_stream_U0_ap_continue : STD_LOGIC;
    signal compress_stream_U0_ap_idle : STD_LOGIC;
    signal compress_stream_U0_ap_ready : STD_LOGIC;
    signal compress_stream_U0_start_out : STD_LOGIC;
    signal compress_stream_U0_start_write : STD_LOGIC;
    signal compress_stream_U0_chunk_arr_stream_read : STD_LOGIC;
    signal compress_stream_U0_codeword_stream_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compress_stream_U0_codeword_stream_write : STD_LOGIC;
    signal compress_stream_U0_gmem_load_loc_read : STD_LOGIC;
    signal write_output_stream_U0_ap_start : STD_LOGIC;
    signal write_output_stream_U0_ap_done : STD_LOGIC;
    signal write_output_stream_U0_ap_continue : STD_LOGIC;
    signal write_output_stream_U0_ap_idle : STD_LOGIC;
    signal write_output_stream_U0_ap_ready : STD_LOGIC;
    signal write_output_stream_U0_codeword_stream_read : STD_LOGIC;
    signal write_output_stream_U0_output_hw_stream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal write_output_stream_U0_output_hw_stream_write : STD_LOGIC;
    signal write_output_stream_U0_compressed_size_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal write_output_stream_U0_compressed_size_stream_write : STD_LOGIC;
    signal store_result_U0_ap_start : STD_LOGIC;
    signal store_result_U0_ap_done : STD_LOGIC;
    signal store_result_U0_ap_continue : STD_LOGIC;
    signal store_result_U0_ap_idle : STD_LOGIC;
    signal store_result_U0_ap_ready : STD_LOGIC;
    signal store_result_U0_compressed_size_stream_read : STD_LOGIC;
    signal store_result_U0_output_hw_stream_read : STD_LOGIC;
    signal store_result_U0_m_axi_aximm2_AWVALID : STD_LOGIC;
    signal store_result_U0_m_axi_aximm2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_result_U0_m_axi_aximm2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_aximm2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_aximm2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_aximm2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_aximm2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_aximm2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_aximm2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_aximm2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_aximm2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_WVALID : STD_LOGIC;
    signal store_result_U0_m_axi_aximm2_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal store_result_U0_m_axi_aximm2_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_WLAST : STD_LOGIC;
    signal store_result_U0_m_axi_aximm2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_ARVALID : STD_LOGIC;
    signal store_result_U0_m_axi_aximm2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_result_U0_m_axi_aximm2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_aximm2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_aximm2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_aximm2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_aximm2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_aximm2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_aximm2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_aximm2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_aximm2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_aximm2_RREADY : STD_LOGIC;
    signal store_result_U0_m_axi_aximm2_BREADY : STD_LOGIC;
    signal store_result_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal store_result_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_result_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal store_result_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal store_result_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal store_result_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_result_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_result_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_result_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_result_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_result_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_result_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal store_result_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal store_result_U0_compressed_data_read : STD_LOGIC;
    signal store_result_U0_compressed_size_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal gmem_load_loc_c_full_n : STD_LOGIC;
    signal gmem_load_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_load_loc_c_empty_n : STD_LOGIC;
    signal in_c_full_n : STD_LOGIC;
    signal in_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal in_c_empty_n : STD_LOGIC;
    signal compressed_data_c_full_n : STD_LOGIC;
    signal compressed_data_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal compressed_data_c_empty_n : STD_LOGIC;
    signal compressed_size_c_full_n : STD_LOGIC;
    signal compressed_size_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal compressed_size_c_empty_n : STD_LOGIC;
    signal chunk_arr_stream_full_n : STD_LOGIC;
    signal chunk_arr_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal chunk_arr_stream_empty_n : STD_LOGIC;
    signal gmem_load_loc_c11_full_n : STD_LOGIC;
    signal gmem_load_loc_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_load_loc_c11_empty_n : STD_LOGIC;
    signal codeword_stream_full_n : STD_LOGIC;
    signal codeword_stream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal codeword_stream_empty_n : STD_LOGIC;
    signal output_hw_stream_full_n : STD_LOGIC;
    signal output_hw_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_hw_stream_empty_n : STD_LOGIC;
    signal compressed_size_stream_full_n : STD_LOGIC;
    signal compressed_size_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal compressed_size_stream_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_split1_proc9_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_split1_proc9_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_input_U0_ap_ready : STD_LOGIC;
    signal start_for_store_result_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_result_U0_full_n : STD_LOGIC;
    signal start_for_store_result_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_result_U0_empty_n : STD_LOGIC;
    signal start_for_compress_stream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compress_stream_U0_full_n : STD_LOGIC;
    signal start_for_compress_stream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compress_stream_U0_empty_n : STD_LOGIC;
    signal start_for_write_output_stream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_output_stream_U0_full_n : STD_LOGIC;
    signal start_for_write_output_stream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_output_stream_U0_empty_n : STD_LOGIC;
    signal write_output_stream_U0_start_full_n : STD_LOGIC;
    signal write_output_stream_U0_start_write : STD_LOGIC;
    signal store_result_U0_start_full_n : STD_LOGIC;
    signal store_result_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lzw_Block_split1_proc9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        chunk_size : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        compressed_data : IN STD_LOGIC_VECTOR (63 downto 0);
        compressed_size : IN STD_LOGIC_VECTOR (63 downto 0);
        gmem_load_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gmem_load_out_out_full_n : IN STD_LOGIC;
        gmem_load_out_out_write : OUT STD_LOGIC;
        in_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_out_full_n : IN STD_LOGIC;
        in_out_write : OUT STD_LOGIC;
        compressed_data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        compressed_data_out_full_n : IN STD_LOGIC;
        compressed_data_out_write : OUT STD_LOGIC;
        compressed_size_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        compressed_size_out_full_n : IN STD_LOGIC;
        compressed_size_out_write : OUT STD_LOGIC );
    end component;


    component lzw_load_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_aximm1_AWVALID : OUT STD_LOGIC;
        m_axi_aximm1_AWREADY : IN STD_LOGIC;
        m_axi_aximm1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_WVALID : OUT STD_LOGIC;
        m_axi_aximm1_WREADY : IN STD_LOGIC;
        m_axi_aximm1_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_aximm1_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_WLAST : OUT STD_LOGIC;
        m_axi_aximm1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_ARVALID : OUT STD_LOGIC;
        m_axi_aximm1_ARREADY : IN STD_LOGIC;
        m_axi_aximm1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_RVALID : IN STD_LOGIC;
        m_axi_aximm1_RREADY : OUT STD_LOGIC;
        m_axi_aximm1_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_aximm1_RLAST : IN STD_LOGIC;
        m_axi_aximm1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm1_BVALID : IN STD_LOGIC;
        m_axi_aximm1_BREADY : OUT STD_LOGIC;
        m_axi_aximm1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inStream_full_n : IN STD_LOGIC;
        inStream_write : OUT STD_LOGIC;
        in_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        gmem_load_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gmem_load_loc_empty_n : IN STD_LOGIC;
        gmem_load_loc_read : OUT STD_LOGIC;
        gmem_load_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gmem_load_loc_out_full_n : IN STD_LOGIC;
        gmem_load_loc_out_write : OUT STD_LOGIC );
    end component;


    component lzw_compress_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        chunk_arr_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        chunk_arr_stream_empty_n : IN STD_LOGIC;
        chunk_arr_stream_read : OUT STD_LOGIC;
        codeword_stream_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        codeword_stream_full_n : IN STD_LOGIC;
        codeword_stream_write : OUT STD_LOGIC;
        gmem_load_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gmem_load_loc_empty_n : IN STD_LOGIC;
        gmem_load_loc_read : OUT STD_LOGIC );
    end component;


    component lzw_write_output_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        codeword_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        codeword_stream_empty_n : IN STD_LOGIC;
        codeword_stream_read : OUT STD_LOGIC;
        output_hw_stream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_hw_stream_full_n : IN STD_LOGIC;
        output_hw_stream_write : OUT STD_LOGIC;
        compressed_size_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        compressed_size_stream_full_n : IN STD_LOGIC;
        compressed_size_stream_write : OUT STD_LOGIC );
    end component;


    component lzw_store_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        compressed_size_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        compressed_size_stream_empty_n : IN STD_LOGIC;
        compressed_size_stream_read : OUT STD_LOGIC;
        output_hw_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        output_hw_stream_empty_n : IN STD_LOGIC;
        output_hw_stream_read : OUT STD_LOGIC;
        m_axi_aximm2_AWVALID : OUT STD_LOGIC;
        m_axi_aximm2_AWREADY : IN STD_LOGIC;
        m_axi_aximm2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_WVALID : OUT STD_LOGIC;
        m_axi_aximm2_WREADY : IN STD_LOGIC;
        m_axi_aximm2_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_aximm2_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_WLAST : OUT STD_LOGIC;
        m_axi_aximm2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_ARVALID : OUT STD_LOGIC;
        m_axi_aximm2_ARREADY : IN STD_LOGIC;
        m_axi_aximm2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_aximm2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_aximm2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_aximm2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_aximm2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_RVALID : IN STD_LOGIC;
        m_axi_aximm2_RREADY : OUT STD_LOGIC;
        m_axi_aximm2_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_aximm2_RLAST : IN STD_LOGIC;
        m_axi_aximm2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm2_BVALID : IN STD_LOGIC;
        m_axi_aximm2_BREADY : OUT STD_LOGIC;
        m_axi_aximm2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_aximm2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_aximm2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        compressed_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        compressed_data_empty_n : IN STD_LOGIC;
        compressed_data_read : OUT STD_LOGIC;
        compressed_size_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        compressed_size_empty_n : IN STD_LOGIC;
        compressed_size_read : OUT STD_LOGIC );
    end component;


    component lzw_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fifo_w64_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fifo_w8_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fifo_w16_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fifo_w32_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_start_for_store_result_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_start_for_compress_stream_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_start_for_write_output_stream_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        chunk_size : OUT STD_LOGIC_VECTOR (63 downto 0);
        compressed_data : OUT STD_LOGIC_VECTOR (63 downto 0);
        compressed_size : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component lzw_aximm1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lzw_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lzw_aximm2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component lzw_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_r => in_r,
        chunk_size => chunk_size,
        compressed_data => compressed_data,
        compressed_size => compressed_size,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    aximm1_m_axi_U : component lzw_aximm1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXIMM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXIMM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXIMM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXIMM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXIMM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXIMM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXIMM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXIMM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXIMM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXIMM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXIMM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_aximm1_AWVALID,
        AWREADY => m_axi_aximm1_AWREADY,
        AWADDR => m_axi_aximm1_AWADDR,
        AWID => m_axi_aximm1_AWID,
        AWLEN => m_axi_aximm1_AWLEN,
        AWSIZE => m_axi_aximm1_AWSIZE,
        AWBURST => m_axi_aximm1_AWBURST,
        AWLOCK => m_axi_aximm1_AWLOCK,
        AWCACHE => m_axi_aximm1_AWCACHE,
        AWPROT => m_axi_aximm1_AWPROT,
        AWQOS => m_axi_aximm1_AWQOS,
        AWREGION => m_axi_aximm1_AWREGION,
        AWUSER => m_axi_aximm1_AWUSER,
        WVALID => m_axi_aximm1_WVALID,
        WREADY => m_axi_aximm1_WREADY,
        WDATA => m_axi_aximm1_WDATA,
        WSTRB => m_axi_aximm1_WSTRB,
        WLAST => m_axi_aximm1_WLAST,
        WID => m_axi_aximm1_WID,
        WUSER => m_axi_aximm1_WUSER,
        ARVALID => m_axi_aximm1_ARVALID,
        ARREADY => m_axi_aximm1_ARREADY,
        ARADDR => m_axi_aximm1_ARADDR,
        ARID => m_axi_aximm1_ARID,
        ARLEN => m_axi_aximm1_ARLEN,
        ARSIZE => m_axi_aximm1_ARSIZE,
        ARBURST => m_axi_aximm1_ARBURST,
        ARLOCK => m_axi_aximm1_ARLOCK,
        ARCACHE => m_axi_aximm1_ARCACHE,
        ARPROT => m_axi_aximm1_ARPROT,
        ARQOS => m_axi_aximm1_ARQOS,
        ARREGION => m_axi_aximm1_ARREGION,
        ARUSER => m_axi_aximm1_ARUSER,
        RVALID => m_axi_aximm1_RVALID,
        RREADY => m_axi_aximm1_RREADY,
        RDATA => m_axi_aximm1_RDATA,
        RLAST => m_axi_aximm1_RLAST,
        RID => m_axi_aximm1_RID,
        RUSER => m_axi_aximm1_RUSER,
        RRESP => m_axi_aximm1_RRESP,
        BVALID => m_axi_aximm1_BVALID,
        BREADY => m_axi_aximm1_BREADY,
        BRESP => m_axi_aximm1_BRESP,
        BID => m_axi_aximm1_BID,
        BUSER => m_axi_aximm1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load_input_U0_m_axi_aximm1_ARVALID,
        I_ARREADY => aximm1_ARREADY,
        I_ARADDR => load_input_U0_m_axi_aximm1_ARADDR,
        I_ARID => load_input_U0_m_axi_aximm1_ARID,
        I_ARLEN => load_input_U0_m_axi_aximm1_ARLEN,
        I_ARSIZE => load_input_U0_m_axi_aximm1_ARSIZE,
        I_ARLOCK => load_input_U0_m_axi_aximm1_ARLOCK,
        I_ARCACHE => load_input_U0_m_axi_aximm1_ARCACHE,
        I_ARQOS => load_input_U0_m_axi_aximm1_ARQOS,
        I_ARPROT => load_input_U0_m_axi_aximm1_ARPROT,
        I_ARUSER => load_input_U0_m_axi_aximm1_ARUSER,
        I_ARBURST => load_input_U0_m_axi_aximm1_ARBURST,
        I_ARREGION => load_input_U0_m_axi_aximm1_ARREGION,
        I_RVALID => aximm1_RVALID,
        I_RREADY => load_input_U0_m_axi_aximm1_RREADY,
        I_RDATA => aximm1_RDATA,
        I_RID => aximm1_RID,
        I_RUSER => aximm1_RUSER,
        I_RRESP => aximm1_RRESP,
        I_RLAST => aximm1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => aximm1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => aximm1_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => aximm1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => aximm1_BRESP,
        I_BID => aximm1_BID,
        I_BUSER => aximm1_BUSER);

    gmem_m_axi_U : component lzw_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Block_split1_proc9_U0_m_axi_gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => Block_split1_proc9_U0_m_axi_gmem_ARADDR,
        I_ARID => Block_split1_proc9_U0_m_axi_gmem_ARID,
        I_ARLEN => Block_split1_proc9_U0_m_axi_gmem_ARLEN,
        I_ARSIZE => Block_split1_proc9_U0_m_axi_gmem_ARSIZE,
        I_ARLOCK => Block_split1_proc9_U0_m_axi_gmem_ARLOCK,
        I_ARCACHE => Block_split1_proc9_U0_m_axi_gmem_ARCACHE,
        I_ARQOS => Block_split1_proc9_U0_m_axi_gmem_ARQOS,
        I_ARPROT => Block_split1_proc9_U0_m_axi_gmem_ARPROT,
        I_ARUSER => Block_split1_proc9_U0_m_axi_gmem_ARUSER,
        I_ARBURST => Block_split1_proc9_U0_m_axi_gmem_ARBURST,
        I_ARREGION => Block_split1_proc9_U0_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => Block_split1_proc9_U0_m_axi_gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => store_result_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => store_result_U0_m_axi_gmem_AWADDR,
        I_AWID => store_result_U0_m_axi_gmem_AWID,
        I_AWLEN => store_result_U0_m_axi_gmem_AWLEN,
        I_AWSIZE => store_result_U0_m_axi_gmem_AWSIZE,
        I_AWLOCK => store_result_U0_m_axi_gmem_AWLOCK,
        I_AWCACHE => store_result_U0_m_axi_gmem_AWCACHE,
        I_AWQOS => store_result_U0_m_axi_gmem_AWQOS,
        I_AWPROT => store_result_U0_m_axi_gmem_AWPROT,
        I_AWUSER => store_result_U0_m_axi_gmem_AWUSER,
        I_AWBURST => store_result_U0_m_axi_gmem_AWBURST,
        I_AWREGION => store_result_U0_m_axi_gmem_AWREGION,
        I_WVALID => store_result_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => store_result_U0_m_axi_gmem_WDATA,
        I_WID => store_result_U0_m_axi_gmem_WID,
        I_WUSER => store_result_U0_m_axi_gmem_WUSER,
        I_WLAST => store_result_U0_m_axi_gmem_WLAST,
        I_WSTRB => store_result_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => store_result_U0_m_axi_gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    aximm2_m_axi_U : component lzw_aximm2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXIMM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXIMM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXIMM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXIMM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXIMM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXIMM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXIMM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXIMM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXIMM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXIMM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXIMM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_aximm2_AWVALID,
        AWREADY => m_axi_aximm2_AWREADY,
        AWADDR => m_axi_aximm2_AWADDR,
        AWID => m_axi_aximm2_AWID,
        AWLEN => m_axi_aximm2_AWLEN,
        AWSIZE => m_axi_aximm2_AWSIZE,
        AWBURST => m_axi_aximm2_AWBURST,
        AWLOCK => m_axi_aximm2_AWLOCK,
        AWCACHE => m_axi_aximm2_AWCACHE,
        AWPROT => m_axi_aximm2_AWPROT,
        AWQOS => m_axi_aximm2_AWQOS,
        AWREGION => m_axi_aximm2_AWREGION,
        AWUSER => m_axi_aximm2_AWUSER,
        WVALID => m_axi_aximm2_WVALID,
        WREADY => m_axi_aximm2_WREADY,
        WDATA => m_axi_aximm2_WDATA,
        WSTRB => m_axi_aximm2_WSTRB,
        WLAST => m_axi_aximm2_WLAST,
        WID => m_axi_aximm2_WID,
        WUSER => m_axi_aximm2_WUSER,
        ARVALID => m_axi_aximm2_ARVALID,
        ARREADY => m_axi_aximm2_ARREADY,
        ARADDR => m_axi_aximm2_ARADDR,
        ARID => m_axi_aximm2_ARID,
        ARLEN => m_axi_aximm2_ARLEN,
        ARSIZE => m_axi_aximm2_ARSIZE,
        ARBURST => m_axi_aximm2_ARBURST,
        ARLOCK => m_axi_aximm2_ARLOCK,
        ARCACHE => m_axi_aximm2_ARCACHE,
        ARPROT => m_axi_aximm2_ARPROT,
        ARQOS => m_axi_aximm2_ARQOS,
        ARREGION => m_axi_aximm2_ARREGION,
        ARUSER => m_axi_aximm2_ARUSER,
        RVALID => m_axi_aximm2_RVALID,
        RREADY => m_axi_aximm2_RREADY,
        RDATA => m_axi_aximm2_RDATA,
        RLAST => m_axi_aximm2_RLAST,
        RID => m_axi_aximm2_RID,
        RUSER => m_axi_aximm2_RUSER,
        RRESP => m_axi_aximm2_RRESP,
        BVALID => m_axi_aximm2_BVALID,
        BREADY => m_axi_aximm2_BREADY,
        BRESP => m_axi_aximm2_BRESP,
        BID => m_axi_aximm2_BID,
        BUSER => m_axi_aximm2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => aximm2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => aximm2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => aximm2_RDATA,
        I_RID => aximm2_RID,
        I_RUSER => aximm2_RUSER,
        I_RRESP => aximm2_RRESP,
        I_RLAST => aximm2_RLAST,
        I_AWVALID => store_result_U0_m_axi_aximm2_AWVALID,
        I_AWREADY => aximm2_AWREADY,
        I_AWADDR => store_result_U0_m_axi_aximm2_AWADDR,
        I_AWID => store_result_U0_m_axi_aximm2_AWID,
        I_AWLEN => store_result_U0_m_axi_aximm2_AWLEN,
        I_AWSIZE => store_result_U0_m_axi_aximm2_AWSIZE,
        I_AWLOCK => store_result_U0_m_axi_aximm2_AWLOCK,
        I_AWCACHE => store_result_U0_m_axi_aximm2_AWCACHE,
        I_AWQOS => store_result_U0_m_axi_aximm2_AWQOS,
        I_AWPROT => store_result_U0_m_axi_aximm2_AWPROT,
        I_AWUSER => store_result_U0_m_axi_aximm2_AWUSER,
        I_AWBURST => store_result_U0_m_axi_aximm2_AWBURST,
        I_AWREGION => store_result_U0_m_axi_aximm2_AWREGION,
        I_WVALID => store_result_U0_m_axi_aximm2_WVALID,
        I_WREADY => aximm2_WREADY,
        I_WDATA => store_result_U0_m_axi_aximm2_WDATA,
        I_WID => store_result_U0_m_axi_aximm2_WID,
        I_WUSER => store_result_U0_m_axi_aximm2_WUSER,
        I_WLAST => store_result_U0_m_axi_aximm2_WLAST,
        I_WSTRB => store_result_U0_m_axi_aximm2_WSTRB,
        I_BVALID => aximm2_BVALID,
        I_BREADY => store_result_U0_m_axi_aximm2_BREADY,
        I_BRESP => aximm2_BRESP,
        I_BID => aximm2_BID,
        I_BUSER => aximm2_BUSER);

    Block_split1_proc9_U0 : component lzw_Block_split1_proc9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split1_proc9_U0_ap_start,
        start_full_n => start_for_store_result_U0_full_n,
        ap_done => Block_split1_proc9_U0_ap_done,
        ap_continue => Block_split1_proc9_U0_ap_continue,
        ap_idle => Block_split1_proc9_U0_ap_idle,
        ap_ready => Block_split1_proc9_U0_ap_ready,
        start_out => Block_split1_proc9_U0_start_out,
        start_write => Block_split1_proc9_U0_start_write,
        chunk_size => chunk_size,
        m_axi_gmem_AWVALID => Block_split1_proc9_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => Block_split1_proc9_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => Block_split1_proc9_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => Block_split1_proc9_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => Block_split1_proc9_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => Block_split1_proc9_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => Block_split1_proc9_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => Block_split1_proc9_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => Block_split1_proc9_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => Block_split1_proc9_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => Block_split1_proc9_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => Block_split1_proc9_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => Block_split1_proc9_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => Block_split1_proc9_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => Block_split1_proc9_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => Block_split1_proc9_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => Block_split1_proc9_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => Block_split1_proc9_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => Block_split1_proc9_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => Block_split1_proc9_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => Block_split1_proc9_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => Block_split1_proc9_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => Block_split1_proc9_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => Block_split1_proc9_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => Block_split1_proc9_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => Block_split1_proc9_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => Block_split1_proc9_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => Block_split1_proc9_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => Block_split1_proc9_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => Block_split1_proc9_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => Block_split1_proc9_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => Block_split1_proc9_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        in_r => in_r,
        compressed_data => compressed_data,
        compressed_size => compressed_size,
        gmem_load_out_out_din => Block_split1_proc9_U0_gmem_load_out_out_din,
        gmem_load_out_out_full_n => gmem_load_loc_c_full_n,
        gmem_load_out_out_write => Block_split1_proc9_U0_gmem_load_out_out_write,
        in_out_din => Block_split1_proc9_U0_in_out_din,
        in_out_full_n => in_c_full_n,
        in_out_write => Block_split1_proc9_U0_in_out_write,
        compressed_data_out_din => Block_split1_proc9_U0_compressed_data_out_din,
        compressed_data_out_full_n => compressed_data_c_full_n,
        compressed_data_out_write => Block_split1_proc9_U0_compressed_data_out_write,
        compressed_size_out_din => Block_split1_proc9_U0_compressed_size_out_din,
        compressed_size_out_full_n => compressed_size_c_full_n,
        compressed_size_out_write => Block_split1_proc9_U0_compressed_size_out_write);

    load_input_U0 : component lzw_load_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_input_U0_ap_start,
        start_full_n => start_for_compress_stream_U0_full_n,
        ap_done => load_input_U0_ap_done,
        ap_continue => load_input_U0_ap_continue,
        ap_idle => load_input_U0_ap_idle,
        ap_ready => load_input_U0_ap_ready,
        start_out => load_input_U0_start_out,
        start_write => load_input_U0_start_write,
        m_axi_aximm1_AWVALID => load_input_U0_m_axi_aximm1_AWVALID,
        m_axi_aximm1_AWREADY => ap_const_logic_0,
        m_axi_aximm1_AWADDR => load_input_U0_m_axi_aximm1_AWADDR,
        m_axi_aximm1_AWID => load_input_U0_m_axi_aximm1_AWID,
        m_axi_aximm1_AWLEN => load_input_U0_m_axi_aximm1_AWLEN,
        m_axi_aximm1_AWSIZE => load_input_U0_m_axi_aximm1_AWSIZE,
        m_axi_aximm1_AWBURST => load_input_U0_m_axi_aximm1_AWBURST,
        m_axi_aximm1_AWLOCK => load_input_U0_m_axi_aximm1_AWLOCK,
        m_axi_aximm1_AWCACHE => load_input_U0_m_axi_aximm1_AWCACHE,
        m_axi_aximm1_AWPROT => load_input_U0_m_axi_aximm1_AWPROT,
        m_axi_aximm1_AWQOS => load_input_U0_m_axi_aximm1_AWQOS,
        m_axi_aximm1_AWREGION => load_input_U0_m_axi_aximm1_AWREGION,
        m_axi_aximm1_AWUSER => load_input_U0_m_axi_aximm1_AWUSER,
        m_axi_aximm1_WVALID => load_input_U0_m_axi_aximm1_WVALID,
        m_axi_aximm1_WREADY => ap_const_logic_0,
        m_axi_aximm1_WDATA => load_input_U0_m_axi_aximm1_WDATA,
        m_axi_aximm1_WSTRB => load_input_U0_m_axi_aximm1_WSTRB,
        m_axi_aximm1_WLAST => load_input_U0_m_axi_aximm1_WLAST,
        m_axi_aximm1_WID => load_input_U0_m_axi_aximm1_WID,
        m_axi_aximm1_WUSER => load_input_U0_m_axi_aximm1_WUSER,
        m_axi_aximm1_ARVALID => load_input_U0_m_axi_aximm1_ARVALID,
        m_axi_aximm1_ARREADY => aximm1_ARREADY,
        m_axi_aximm1_ARADDR => load_input_U0_m_axi_aximm1_ARADDR,
        m_axi_aximm1_ARID => load_input_U0_m_axi_aximm1_ARID,
        m_axi_aximm1_ARLEN => load_input_U0_m_axi_aximm1_ARLEN,
        m_axi_aximm1_ARSIZE => load_input_U0_m_axi_aximm1_ARSIZE,
        m_axi_aximm1_ARBURST => load_input_U0_m_axi_aximm1_ARBURST,
        m_axi_aximm1_ARLOCK => load_input_U0_m_axi_aximm1_ARLOCK,
        m_axi_aximm1_ARCACHE => load_input_U0_m_axi_aximm1_ARCACHE,
        m_axi_aximm1_ARPROT => load_input_U0_m_axi_aximm1_ARPROT,
        m_axi_aximm1_ARQOS => load_input_U0_m_axi_aximm1_ARQOS,
        m_axi_aximm1_ARREGION => load_input_U0_m_axi_aximm1_ARREGION,
        m_axi_aximm1_ARUSER => load_input_U0_m_axi_aximm1_ARUSER,
        m_axi_aximm1_RVALID => aximm1_RVALID,
        m_axi_aximm1_RREADY => load_input_U0_m_axi_aximm1_RREADY,
        m_axi_aximm1_RDATA => aximm1_RDATA,
        m_axi_aximm1_RLAST => aximm1_RLAST,
        m_axi_aximm1_RID => aximm1_RID,
        m_axi_aximm1_RUSER => aximm1_RUSER,
        m_axi_aximm1_RRESP => aximm1_RRESP,
        m_axi_aximm1_BVALID => ap_const_logic_0,
        m_axi_aximm1_BREADY => load_input_U0_m_axi_aximm1_BREADY,
        m_axi_aximm1_BRESP => ap_const_lv2_0,
        m_axi_aximm1_BID => ap_const_lv1_0,
        m_axi_aximm1_BUSER => ap_const_lv1_0,
        inStream_din => load_input_U0_inStream_din,
        inStream_full_n => chunk_arr_stream_full_n,
        inStream_write => load_input_U0_inStream_write,
        in_r_dout => in_c_dout,
        in_r_empty_n => in_c_empty_n,
        in_r_read => load_input_U0_in_r_read,
        gmem_load_loc_dout => gmem_load_loc_c_dout,
        gmem_load_loc_empty_n => gmem_load_loc_c_empty_n,
        gmem_load_loc_read => load_input_U0_gmem_load_loc_read,
        gmem_load_loc_out_din => load_input_U0_gmem_load_loc_out_din,
        gmem_load_loc_out_full_n => gmem_load_loc_c11_full_n,
        gmem_load_loc_out_write => load_input_U0_gmem_load_loc_out_write);

    compress_stream_U0 : component lzw_compress_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compress_stream_U0_ap_start,
        start_full_n => start_for_write_output_stream_U0_full_n,
        ap_done => compress_stream_U0_ap_done,
        ap_continue => compress_stream_U0_ap_continue,
        ap_idle => compress_stream_U0_ap_idle,
        ap_ready => compress_stream_U0_ap_ready,
        start_out => compress_stream_U0_start_out,
        start_write => compress_stream_U0_start_write,
        chunk_arr_stream_dout => chunk_arr_stream_dout,
        chunk_arr_stream_empty_n => chunk_arr_stream_empty_n,
        chunk_arr_stream_read => compress_stream_U0_chunk_arr_stream_read,
        codeword_stream_din => compress_stream_U0_codeword_stream_din,
        codeword_stream_full_n => codeword_stream_full_n,
        codeword_stream_write => compress_stream_U0_codeword_stream_write,
        gmem_load_loc_dout => gmem_load_loc_c11_dout,
        gmem_load_loc_empty_n => gmem_load_loc_c11_empty_n,
        gmem_load_loc_read => compress_stream_U0_gmem_load_loc_read);

    write_output_stream_U0 : component lzw_write_output_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_output_stream_U0_ap_start,
        ap_done => write_output_stream_U0_ap_done,
        ap_continue => write_output_stream_U0_ap_continue,
        ap_idle => write_output_stream_U0_ap_idle,
        ap_ready => write_output_stream_U0_ap_ready,
        codeword_stream_dout => codeword_stream_dout,
        codeword_stream_empty_n => codeword_stream_empty_n,
        codeword_stream_read => write_output_stream_U0_codeword_stream_read,
        output_hw_stream_din => write_output_stream_U0_output_hw_stream_din,
        output_hw_stream_full_n => output_hw_stream_full_n,
        output_hw_stream_write => write_output_stream_U0_output_hw_stream_write,
        compressed_size_stream_din => write_output_stream_U0_compressed_size_stream_din,
        compressed_size_stream_full_n => compressed_size_stream_full_n,
        compressed_size_stream_write => write_output_stream_U0_compressed_size_stream_write);

    store_result_U0 : component lzw_store_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_result_U0_ap_start,
        ap_done => store_result_U0_ap_done,
        ap_continue => store_result_U0_ap_continue,
        ap_idle => store_result_U0_ap_idle,
        ap_ready => store_result_U0_ap_ready,
        compressed_size_stream_dout => compressed_size_stream_dout,
        compressed_size_stream_empty_n => compressed_size_stream_empty_n,
        compressed_size_stream_read => store_result_U0_compressed_size_stream_read,
        output_hw_stream_dout => output_hw_stream_dout,
        output_hw_stream_empty_n => output_hw_stream_empty_n,
        output_hw_stream_read => store_result_U0_output_hw_stream_read,
        m_axi_aximm2_AWVALID => store_result_U0_m_axi_aximm2_AWVALID,
        m_axi_aximm2_AWREADY => aximm2_AWREADY,
        m_axi_aximm2_AWADDR => store_result_U0_m_axi_aximm2_AWADDR,
        m_axi_aximm2_AWID => store_result_U0_m_axi_aximm2_AWID,
        m_axi_aximm2_AWLEN => store_result_U0_m_axi_aximm2_AWLEN,
        m_axi_aximm2_AWSIZE => store_result_U0_m_axi_aximm2_AWSIZE,
        m_axi_aximm2_AWBURST => store_result_U0_m_axi_aximm2_AWBURST,
        m_axi_aximm2_AWLOCK => store_result_U0_m_axi_aximm2_AWLOCK,
        m_axi_aximm2_AWCACHE => store_result_U0_m_axi_aximm2_AWCACHE,
        m_axi_aximm2_AWPROT => store_result_U0_m_axi_aximm2_AWPROT,
        m_axi_aximm2_AWQOS => store_result_U0_m_axi_aximm2_AWQOS,
        m_axi_aximm2_AWREGION => store_result_U0_m_axi_aximm2_AWREGION,
        m_axi_aximm2_AWUSER => store_result_U0_m_axi_aximm2_AWUSER,
        m_axi_aximm2_WVALID => store_result_U0_m_axi_aximm2_WVALID,
        m_axi_aximm2_WREADY => aximm2_WREADY,
        m_axi_aximm2_WDATA => store_result_U0_m_axi_aximm2_WDATA,
        m_axi_aximm2_WSTRB => store_result_U0_m_axi_aximm2_WSTRB,
        m_axi_aximm2_WLAST => store_result_U0_m_axi_aximm2_WLAST,
        m_axi_aximm2_WID => store_result_U0_m_axi_aximm2_WID,
        m_axi_aximm2_WUSER => store_result_U0_m_axi_aximm2_WUSER,
        m_axi_aximm2_ARVALID => store_result_U0_m_axi_aximm2_ARVALID,
        m_axi_aximm2_ARREADY => ap_const_logic_0,
        m_axi_aximm2_ARADDR => store_result_U0_m_axi_aximm2_ARADDR,
        m_axi_aximm2_ARID => store_result_U0_m_axi_aximm2_ARID,
        m_axi_aximm2_ARLEN => store_result_U0_m_axi_aximm2_ARLEN,
        m_axi_aximm2_ARSIZE => store_result_U0_m_axi_aximm2_ARSIZE,
        m_axi_aximm2_ARBURST => store_result_U0_m_axi_aximm2_ARBURST,
        m_axi_aximm2_ARLOCK => store_result_U0_m_axi_aximm2_ARLOCK,
        m_axi_aximm2_ARCACHE => store_result_U0_m_axi_aximm2_ARCACHE,
        m_axi_aximm2_ARPROT => store_result_U0_m_axi_aximm2_ARPROT,
        m_axi_aximm2_ARQOS => store_result_U0_m_axi_aximm2_ARQOS,
        m_axi_aximm2_ARREGION => store_result_U0_m_axi_aximm2_ARREGION,
        m_axi_aximm2_ARUSER => store_result_U0_m_axi_aximm2_ARUSER,
        m_axi_aximm2_RVALID => ap_const_logic_0,
        m_axi_aximm2_RREADY => store_result_U0_m_axi_aximm2_RREADY,
        m_axi_aximm2_RDATA => ap_const_lv8_0,
        m_axi_aximm2_RLAST => ap_const_logic_0,
        m_axi_aximm2_RID => ap_const_lv1_0,
        m_axi_aximm2_RUSER => ap_const_lv1_0,
        m_axi_aximm2_RRESP => ap_const_lv2_0,
        m_axi_aximm2_BVALID => aximm2_BVALID,
        m_axi_aximm2_BREADY => store_result_U0_m_axi_aximm2_BREADY,
        m_axi_aximm2_BRESP => aximm2_BRESP,
        m_axi_aximm2_BID => aximm2_BID,
        m_axi_aximm2_BUSER => aximm2_BUSER,
        m_axi_gmem_AWVALID => store_result_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => store_result_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => store_result_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => store_result_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => store_result_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => store_result_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => store_result_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => store_result_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => store_result_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => store_result_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => store_result_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => store_result_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => store_result_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => store_result_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => store_result_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => store_result_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => store_result_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => store_result_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => store_result_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => store_result_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => store_result_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => store_result_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => store_result_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => store_result_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => store_result_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => store_result_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => store_result_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => store_result_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => store_result_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => store_result_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => store_result_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => store_result_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        compressed_data_dout => compressed_data_c_dout,
        compressed_data_empty_n => compressed_data_c_empty_n,
        compressed_data_read => store_result_U0_compressed_data_read,
        compressed_size_dout => compressed_size_c_dout,
        compressed_size_empty_n => compressed_size_c_empty_n,
        compressed_size_read => store_result_U0_compressed_size_read);

    gmem_load_loc_c_U : component lzw_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_gmem_load_out_out_din,
        if_full_n => gmem_load_loc_c_full_n,
        if_write => Block_split1_proc9_U0_gmem_load_out_out_write,
        if_dout => gmem_load_loc_c_dout,
        if_empty_n => gmem_load_loc_c_empty_n,
        if_read => load_input_U0_gmem_load_loc_read);

    in_c_U : component lzw_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_in_out_din,
        if_full_n => in_c_full_n,
        if_write => Block_split1_proc9_U0_in_out_write,
        if_dout => in_c_dout,
        if_empty_n => in_c_empty_n,
        if_read => load_input_U0_in_r_read);

    compressed_data_c_U : component lzw_fifo_w64_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_compressed_data_out_din,
        if_full_n => compressed_data_c_full_n,
        if_write => Block_split1_proc9_U0_compressed_data_out_write,
        if_dout => compressed_data_c_dout,
        if_empty_n => compressed_data_c_empty_n,
        if_read => store_result_U0_compressed_data_read);

    compressed_size_c_U : component lzw_fifo_w64_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_compressed_size_out_din,
        if_full_n => compressed_size_c_full_n,
        if_write => Block_split1_proc9_U0_compressed_size_out_write,
        if_dout => compressed_size_c_dout,
        if_empty_n => compressed_size_c_empty_n,
        if_read => store_result_U0_compressed_size_read);

    chunk_arr_stream_U : component lzw_fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input_U0_inStream_din,
        if_full_n => chunk_arr_stream_full_n,
        if_write => load_input_U0_inStream_write,
        if_dout => chunk_arr_stream_dout,
        if_empty_n => chunk_arr_stream_empty_n,
        if_read => compress_stream_U0_chunk_arr_stream_read);

    gmem_load_loc_c11_U : component lzw_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input_U0_gmem_load_loc_out_din,
        if_full_n => gmem_load_loc_c11_full_n,
        if_write => load_input_U0_gmem_load_loc_out_write,
        if_dout => gmem_load_loc_c11_dout,
        if_empty_n => gmem_load_loc_c11_empty_n,
        if_read => compress_stream_U0_gmem_load_loc_read);

    codeword_stream_U : component lzw_fifo_w16_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compress_stream_U0_codeword_stream_din,
        if_full_n => codeword_stream_full_n,
        if_write => compress_stream_U0_codeword_stream_write,
        if_dout => codeword_stream_dout,
        if_empty_n => codeword_stream_empty_n,
        if_read => write_output_stream_U0_codeword_stream_read);

    output_hw_stream_U : component lzw_fifo_w8_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => write_output_stream_U0_output_hw_stream_din,
        if_full_n => output_hw_stream_full_n,
        if_write => write_output_stream_U0_output_hw_stream_write,
        if_dout => output_hw_stream_dout,
        if_empty_n => output_hw_stream_empty_n,
        if_read => store_result_U0_output_hw_stream_read);

    compressed_size_stream_U : component lzw_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => write_output_stream_U0_compressed_size_stream_din,
        if_full_n => compressed_size_stream_full_n,
        if_write => write_output_stream_U0_compressed_size_stream_write,
        if_dout => compressed_size_stream_dout,
        if_empty_n => compressed_size_stream_empty_n,
        if_read => store_result_U0_compressed_size_stream_read);

    start_for_store_result_U0_U : component lzw_start_for_store_result_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_result_U0_din,
        if_full_n => start_for_store_result_U0_full_n,
        if_write => Block_split1_proc9_U0_start_write,
        if_dout => start_for_store_result_U0_dout,
        if_empty_n => start_for_store_result_U0_empty_n,
        if_read => store_result_U0_ap_ready);

    start_for_compress_stream_U0_U : component lzw_start_for_compress_stream_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compress_stream_U0_din,
        if_full_n => start_for_compress_stream_U0_full_n,
        if_write => load_input_U0_start_write,
        if_dout => start_for_compress_stream_U0_dout,
        if_empty_n => start_for_compress_stream_U0_empty_n,
        if_read => compress_stream_U0_ap_ready);

    start_for_write_output_stream_U0_U : component lzw_start_for_write_output_stream_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_output_stream_U0_din,
        if_full_n => start_for_write_output_stream_U0_full_n,
        if_write => compress_stream_U0_start_write,
        if_dout => start_for_write_output_stream_U0_dout,
        if_empty_n => start_for_write_output_stream_U0_empty_n,
        if_read => write_output_stream_U0_ap_ready);





    ap_sync_reg_Block_split1_proc9_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_split1_proc9_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_split1_proc9_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_split1_proc9_U0_ap_ready <= ap_sync_Block_split1_proc9_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_sync_load_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    Block_split1_proc9_U0_ap_continue <= ap_const_logic_1;
    Block_split1_proc9_U0_ap_start <= ((ap_sync_reg_Block_split1_proc9_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_done <= store_result_U0_ap_done;
    ap_idle <= (write_output_stream_U0_ap_idle and store_result_U0_ap_idle and load_input_U0_ap_idle and compress_stream_U0_ap_idle and Block_split1_proc9_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_split1_proc9_U0_ap_ready <= (ap_sync_reg_Block_split1_proc9_U0_ap_ready or Block_split1_proc9_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= store_result_U0_ap_done;
    ap_sync_load_input_U0_ap_ready <= (load_input_U0_ap_ready or ap_sync_reg_load_input_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_input_U0_ap_ready and ap_sync_Block_split1_proc9_U0_ap_ready);
    compress_stream_U0_ap_continue <= ap_const_logic_1;
    compress_stream_U0_ap_start <= start_for_compress_stream_U0_empty_n;
    load_input_U0_ap_continue <= ap_const_logic_1;
    load_input_U0_ap_start <= ((ap_sync_reg_load_input_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_compress_stream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_result_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_output_stream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_result_U0_ap_continue <= ap_continue;
    store_result_U0_ap_start <= start_for_store_result_U0_empty_n;
    store_result_U0_start_full_n <= ap_const_logic_1;
    store_result_U0_start_write <= ap_const_logic_0;
    write_output_stream_U0_ap_continue <= ap_const_logic_1;
    write_output_stream_U0_ap_start <= start_for_write_output_stream_U0_empty_n;
    write_output_stream_U0_start_full_n <= ap_const_logic_1;
    write_output_stream_U0_start_write <= ap_const_logic_0;
end behav;
